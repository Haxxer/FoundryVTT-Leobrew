{
  "version": 3,
  "sources": ["../../node_modules/@typhonjs-fvtt/runtime/node_modules/@typhonjs-fvtt/svelte/_dist/util/index.js", "../../node_modules/@typhonjs-fvtt/runtime/node_modules/@typhonjs-fvtt/svelte/_dist/store/index.js"],
  "sourcesContent": ["import { group_outros, transition_out, check_outros } from 'svelte/internal';\n\n/**\n * Provides common object manipulation utilities including depth traversal, obtaining accessors, safely setting values /\n * equality tests, and validation.\n */\n\nconst s_TAG_OBJECT = '[object Object]';\n\n/**\n * Recursively deep merges all source objects into the target object in place. Like `Object.assign` if you provide `{}`\n * as the target a copy is produced. If the target and source property are object literals they are merged.\n * Deleting keys is supported by specifying a property starting with `-=`.\n *\n * @param {object}      target - Target object.\n *\n * @param {...object}   sourceObj - One or more source objects.\n *\n * @returns {object}    Target object.\n */\nfunction deepMerge(target = {}, ...sourceObj)\n{\n   if (Object.prototype.toString.call(target) !== s_TAG_OBJECT)\n   {\n      throw new TypeError(`deepMerge error: 'target' is not an 'object'.`);\n   }\n\n   for (let cntr = 0; cntr < sourceObj.length; cntr++)\n   {\n      if (Object.prototype.toString.call(sourceObj[cntr]) !== s_TAG_OBJECT)\n      {\n         throw new TypeError(`deepMerge error: 'sourceObj[${cntr}]' is not an 'object'.`);\n      }\n   }\n\n   return _deepMerge(target, ...sourceObj);\n}\n\n/**\n * Tests for whether an object is iterable.\n *\n * @param {*} value - Any value.\n *\n * @returns {boolean} Whether object is iterable.\n */\nfunction isIterable(value)\n{\n   if (value === null || value === void 0 || typeof value !== 'object') { return false; }\n\n   return typeof value[Symbol.iterator] === 'function';\n}\n\n/**\n * Tests for whether an object is async iterable.\n *\n * @param {*} value - Any value.\n *\n * @returns {boolean} Whether value is async iterable.\n */\nfunction isIterableAsync(value)\n{\n   if (value === null || value === void 0 || typeof value !== 'object') { return false; }\n\n   return typeof value[Symbol.asyncIterator] === 'function';\n}\n\n/**\n * Tests for whether object is not null and a typeof object.\n *\n * @param {*} value - Any value.\n *\n * @returns {boolean} Is it an object.\n */\nfunction isObject(value)\n{\n   return value !== null && typeof value === 'object';\n}\n\n/**\n * Tests for whether the given value is a plain object.\n *\n * An object is plain if it is created by either: {}, new Object() or Object.create(null).\n *\n * @param {*} value - Any value\n *\n * @returns {boolean} Is it a plain object.\n */\nfunction isPlainObject(value)\n{\n   if (Object.prototype.toString.call(value) !== s_TAG_OBJECT) { return false; }\n\n   const prototype = Object.getPrototypeOf(value);\n   return prototype === null || prototype === Object.prototype;\n}\n\n/**\n * Provides a way to safely access an objects data / entries given an accessor string which describes the\n * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n * to walk.\n *\n * @param {object}   data - An object to access entry data.\n *\n * @param {string}   accessor - A string describing the entries to access.\n *\n * @param {*}        defaultValue - (Optional) A default value to return if an entry for accessor is not found.\n *\n * @returns {object} The data object.\n */\nfunction safeAccess(data, accessor, defaultValue = void 0)\n{\n   if (typeof data !== 'object') { return defaultValue; }\n   if (typeof accessor !== 'string') { return defaultValue; }\n\n   const access = accessor.split('.');\n\n   // Walk through the given object by the accessor indexes.\n   for (let cntr = 0; cntr < access.length; cntr++)\n   {\n      // If the next level of object access is undefined or null then return the empty string.\n      if (typeof data[access[cntr]] === 'undefined' || data[access[cntr]] === null) { return defaultValue; }\n\n      data = data[access[cntr]];\n   }\n\n   return data;\n}\n\n/**\n * Provides a way to safely set an objects data / entries given an accessor string which describes the\n * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n * to walk.\n *\n * @param {object}   data - An object to access entry data.\n *\n * @param {string}   accessor - A string describing the entries to access.\n *\n * @param {*}        value - A new value to set if an entry for accessor is found.\n *\n * @param {string}   [operation='set'] - Operation to perform including: 'add', 'div', 'mult', 'set',\n *                                       'set-undefined', 'sub'.\n *\n * @param {boolean}  [createMissing=true] - If true missing accessor entries will be created as objects\n *                                          automatically.\n *\n * @returns {boolean} True if successful.\n */\nfunction safeSet(data, accessor, value, operation = 'set', createMissing = true)\n{\n   if (typeof data !== 'object') { throw new TypeError(`safeSet Error: 'data' is not an 'object'.`); }\n   if (typeof accessor !== 'string') { throw new TypeError(`safeSet Error: 'accessor' is not a 'string'.`); }\n\n   const access = accessor.split('.');\n\n   // Walk through the given object by the accessor indexes.\n   for (let cntr = 0; cntr < access.length; cntr++)\n   {\n      // If data is an array perform validation that the accessor is a positive integer otherwise quit.\n      if (Array.isArray(data))\n      {\n         const number = (+access[cntr]);\n\n         if (!Number.isInteger(number) || number < 0) { return false; }\n      }\n\n      if (cntr === access.length - 1)\n      {\n         switch (operation)\n         {\n            case 'add':\n               data[access[cntr]] += value;\n               break;\n\n            case 'div':\n               data[access[cntr]] /= value;\n               break;\n\n            case 'mult':\n               data[access[cntr]] *= value;\n               break;\n\n            case 'set':\n               data[access[cntr]] = value;\n               break;\n\n            case 'set-undefined':\n               if (typeof data[access[cntr]] === 'undefined') { data[access[cntr]] = value; }\n               break;\n\n            case 'sub':\n               data[access[cntr]] -= value;\n               break;\n         }\n      }\n      else\n      {\n         // If createMissing is true and the next level of object access is undefined then create a new object entry.\n         if (createMissing && typeof data[access[cntr]] === 'undefined') { data[access[cntr]] = {}; }\n\n         // Abort if the next level is null or not an object and containing a value.\n         if (data[access[cntr]] === null || typeof data[access[cntr]] !== 'object') { return false; }\n\n         data = data[access[cntr]];\n      }\n   }\n\n   return true;\n}\n\n/**\n * Internal implementation for `deepMerge`.\n *\n * @param {object}      target - Target object.\n *\n * @param {...object}   sourceObj - One or more source objects.\n *\n * @returns {object}    Target object.\n */\nfunction _deepMerge(target = {}, ...sourceObj)\n{\n   // Iterate and merge all source objects into target.\n   for (let cntr = 0; cntr < sourceObj.length; cntr++)\n   {\n      const obj = sourceObj[cntr];\n\n      for (const prop in obj)\n      {\n         if (Object.prototype.hasOwnProperty.call(obj, prop))\n         {\n            // Handle the special property starting with '-=' to delete keys.\n            if (prop.startsWith('-='))\n            {\n               delete target[prop.slice(2)];\n               continue;\n            }\n\n            // If target already has prop and both target[prop] and obj[prop] are object literals then merge them\n            // otherwise assign obj[prop] to target[prop].\n            target[prop] = Object.prototype.hasOwnProperty.call(target, prop) && target[prop]?.constructor === Object &&\n            obj[prop]?.constructor === Object ? _deepMerge({}, target[prop], obj[prop]) : obj[prop];\n         }\n      }\n   }\n\n   return target;\n}\n\n/**\n * Provides several helpful utility methods for accessibility and keyboard navigation.\n */\nclass A11yHelper\n{\n   /**\n    * Apply focus to the HTMLElement targets in a given A11yFocusSource data object. An iterable list `options.focusEl`\n    * can contain HTMLElements or selector strings. If multiple focus targets are provided in a list then the first\n    * valid target found will be focused. If focus target is a string then a lookup via `document.querySelector` is\n    * performed. In this case you should provide a unique selector for the desired focus target.\n    *\n    * Note: The body of this method is postponed to the next clock tick to allow any changes in the DOM to occur that\n    * might alter focus targets before applying.\n    *\n    * @param {A11yFocusSource|{ focusSource: A11yFocusSource }}   options - The focus options instance to apply.\n    */\n   static applyFocusSource(options)\n   {\n      if (!isObject(options)) { return; }\n\n      // Handle the case of receiving an object with embedded `focusSource`.\n      const focusOpts = isObject(options?.focusSource) ? options.focusSource : options;\n\n      setTimeout(() =>\n      {\n         const debug = typeof focusOpts.debug === 'boolean' ? focusOpts.debug : false;\n\n         if (isIterable(focusOpts.focusEl))\n         {\n            if (debug)\n            {\n               console.debug(`A11yHelper.applyFocusSource debug - Attempting to apply focus target: `, focusOpts.focusEl);\n            }\n\n            for (const target of focusOpts.focusEl)\n            {\n               if (target instanceof HTMLElement && target.isConnected)\n               {\n                  target.focus();\n                  if (debug)\n                  {\n                     console.debug(`A11yHelper.applyFocusSource debug - Applied focus to target: `, target);\n                  }\n                  break;\n               }\n               else if (typeof target === 'string')\n               {\n                  const element = document.querySelector(target);\n                  if (element instanceof HTMLElement && element.isConnected)\n                  {\n                     element.focus();\n                     if (debug)\n                     {\n                        console.debug(`A11yHelper.applyFocusSource debug - Applied focus to target: `, element);\n                     }\n                     break;\n                  }\n                  else if (debug)\n                  {\n                     console.debug(`A11yHelper.applyFocusSource debug - Could not query selector: `, target);\n                  }\n               }\n            }\n         }\n         else if (debug)\n         {\n            console.debug(`A11yHelper.applyFocusSource debug - No focus targets defined.`);\n         }\n      }, 0);\n   }\n\n   /**\n    * Returns first focusable element within a specified element.\n    *\n    * @param {HTMLElement|Document} [element=document] - Optional element to start query.\n    *\n    * @param {object} [options] - Optional parameters.\n    *\n    * @param {Iterable<string>} [options.ignoreClasses] - Iterable list of classes to ignore elements.\n    *\n    * @param {Set<HTMLElement>} [options.ignoreElements] - Set of elements to ignore.\n    *\n    * @returns {HTMLElement} First focusable child element\n    */\n   static getFirstFocusableElement(element = document, options)\n   {\n      const focusableElements = this.getFocusableElements(element, options);\n\n      return focusableElements.length > 0 ? focusableElements[0] : void 0;\n   }\n\n   /**\n    * Returns all focusable elements within a specified element.\n    *\n    * @param {HTMLElement|Document} [element=document] Optional element to start query.\n    *\n    * @param {object}            [options] - Optional parameters.\n    *\n    * @param {boolean}           [options.anchorHref=true] - When true anchors must have an HREF.\n    *\n    * @param {Iterable<string>}  [options.ignoreClasses] - Iterable list of classes to ignore elements.\n    *\n    * @param {Set<HTMLElement>}  [options.ignoreElements] - Set of elements to ignore.\n    *\n    * @param {string}            [options.selectors] - Custom list of focusable selectors for `querySelectorAll`.\n    *\n    * @returns {Array<HTMLElement>} Child keyboard focusable\n    */\n   static getFocusableElements(element = document, { anchorHref = true, ignoreClasses, ignoreElements, selectors } = {})\n   {\n      if (!(element instanceof HTMLElement) && !(element instanceof Document))\n      {\n         throw new TypeError(`'element' is not a HTMLElement or Document instance.`);\n      }\n\n      if (typeof anchorHref !== 'boolean')\n      {\n         throw new TypeError(`'anchorHref' is not a boolean.`);\n      }\n\n      if (ignoreClasses !== void 0 && !isIterable(ignoreClasses))\n      {\n         throw new TypeError(`'ignoreClasses' is not an iterable list.`);\n      }\n\n      if (ignoreElements !== void 0 && !(ignoreElements instanceof Set))\n      {\n         throw new TypeError(`'ignoreElements' is not a Set.`);\n      }\n\n      if (selectors !== void 0 && typeof selectors !== 'string')\n      {\n         throw new TypeError(`'selectors' is not a string.`);\n      }\n\n      const selectorQuery = selectors ?? this.#getFocusableSelectors(anchorHref);\n\n      const allElements = [...element.querySelectorAll(selectorQuery)];\n\n      if (ignoreElements && ignoreClasses)\n      {\n         return allElements.filter((el) =>\n         {\n            let hasIgnoreClass = false;\n            for (const ignoreClass of ignoreClasses)\n            {\n               if (el.classList.contains(ignoreClass))\n               {\n                  hasIgnoreClass = true;\n                  break;\n               }\n            }\n\n            return !hasIgnoreClass && !ignoreElements.has(el) && el.style.display !== 'none' &&\n             el.style.visibility !== 'hidden' && !el.hasAttribute('disabled') && !el.hasAttribute('inert') &&\n              el.getAttribute('aria-hidden') !== 'true';\n         });\n      }\n      else if (ignoreClasses)\n      {\n         return allElements.filter((el) =>\n         {\n            let hasIgnoreClass = false;\n            for (const ignoreClass of ignoreClasses)\n            {\n               if (el.classList.contains(ignoreClass))\n               {\n                  hasIgnoreClass = true;\n                  break;\n               }\n            }\n\n            return !hasIgnoreClass && el.style.display !== 'none' && el.style.visibility !== 'hidden' &&\n             !el.hasAttribute('disabled') && !el.hasAttribute('inert') && el.getAttribute('aria-hidden') !== 'true';\n         });\n      }\n      else if (ignoreElements)\n      {\n         return allElements.filter((el) =>\n         {\n            return !ignoreElements.has(el) && el.style.display !== 'none' && el.style.visibility !== 'hidden' &&\n             !el.hasAttribute('disabled') && !el.hasAttribute('inert') && el.getAttribute('aria-hidden') !== 'true';\n         });\n      }\n      else\n      {\n         return allElements.filter((el) =>\n         {\n            return el.style.display !== 'none' && el.style.visibility !== 'hidden' && !el.hasAttribute('disabled') &&\n             !el.hasAttribute('inert') && el.getAttribute('aria-hidden') !== 'true';\n         });\n      }\n   }\n\n   /**\n    * Returns the default focusable selectors query.\n    *\n    * @param {boolean}  [anchorHref=true] - When true anchors must have an HREF.\n    *\n    * @returns {string} Focusable selectors for `querySelectorAll`.\n    */\n   static #getFocusableSelectors(anchorHref = true)\n   {\n      return `button, [contenteditable=\"\"], [contenteditable=\"true\"], details summary:not([tabindex=\"-1\"]), embed, a${\n       anchorHref ? '[href]' : ''}, iframe, object, input:not([type=hidden]), select, textarea, ` +\n        `[tabindex]:not([tabindex=\"-1\"])`;\n   }\n\n   /**\n    * Gets a A11yFocusSource object from the given DOM event allowing for optional X / Y screen space overrides.\n    * Browsers (Firefox / Chrome) forwards a mouse event for the context menu keyboard button. Provides detection of\n    * when the context menu event is from the keyboard. Firefox as of (1/23) does not provide the correct screen space\n    * coordinates, so for keyboard context menu presses coordinates are generated from the centroid point of the\n    * element.\n    *\n    * A default fallback element or selector string may be provided to provide the focus target. If the event comes from\n    * the keyboard however the source focused element is inserted as the target with the fallback value appended to the\n    * list of focus targets. When A11yFocusSource is applied by {@link A11yHelper.applyFocusSource} the target focus\n    * list is iterated through until a connected target is found and focus applied.\n    *\n    * @param {object} options - Options\n    *\n    * @param {KeyboardEvent|MouseEvent}   [options.event] - The source DOM event.\n    *\n    * @param {boolean} [options.debug] - When true {@link A11yHelper.applyFocusSource} logs focus target data.\n    *\n    * @param {HTMLElement|string} [options.focusEl] - A specific HTMLElement or selector string as the focus target.\n    *\n    * @param {number}   [options.x] - Used when an event isn't provided; integer of event source in screen space.\n    *\n    * @param {number}   [options.y] - Used when an event isn't provided; integer of event source in screen space.\n    *\n    * @returns {A11yFocusSource} A A11yFocusSource object.\n    *\n    * @see https://bugzilla.mozilla.org/show_bug.cgi?id=1426671\n    * @see https://bugzilla.mozilla.org/show_bug.cgi?id=314314\n    *\n    * TODO: Evaluate / test against touch input devices.\n    */\n   static getFocusSource({ event, x, y, focusEl, debug = false })\n   {\n      if (focusEl !== void 0 && !(focusEl instanceof HTMLElement) && typeof focusEl !== 'string')\n      {\n         throw new TypeError(\n          `A11yHelper.getFocusSource error: 'focusEl' is not a HTMLElement or string.`);\n      }\n\n      if (debug !== void 0 && typeof debug !== 'boolean')\n      {\n         throw new TypeError(`A11yHelper.getFocusSource error: 'debug' is not a boolean.`);\n      }\n\n      // Handle the case when no event is provided and x, y, or focusEl is explicitly defined.\n      if (event === void 0)\n      {\n         if (typeof x !== 'number')\n         {\n            throw new TypeError(`A11yHelper.getFocusSource error: 'event' not defined and 'x' is not a number.`);\n         }\n\n         if (typeof y !== 'number')\n         {\n            throw new TypeError(`A11yHelper.getFocusSource error: 'event' not defined and 'y' is not a number.`);\n         }\n\n         return {\n            debug,\n            focusEl: focusEl !== void 0 ? [focusEl] : void 0,\n            x,\n            y,\n         };\n      }\n\n      if (!(event instanceof KeyboardEvent) && !(event instanceof MouseEvent))\n      {\n         throw new TypeError(`A11yHelper.getFocusSource error: 'event' is not a KeyboardEvent or MouseEvent.`);\n      }\n\n      if (x !== void 0 && !Number.isInteger(x))\n      {\n         throw new TypeError(`A11yHelper.getFocusSource error: 'x' is not a number.`);\n      }\n\n      if (y !== void 0 && !Number.isInteger(y))\n      {\n         throw new TypeError(`A11yHelper.getFocusSource error: 'y' is not a number.`);\n      }\n\n      /** @type {HTMLElement} */\n      const targetEl = event.target;\n\n      if (!(targetEl instanceof HTMLElement))\n      {\n         throw new TypeError(`A11yHelper.getFocusSource error: 'event.target' is not an HTMLElement.`);\n      }\n\n      const result = { debug };\n\n      if (event instanceof MouseEvent)\n      {\n         // Firefox currently (1/23) does not correctly determine the location of a keyboard originated\n         // context menu location, so calculate position from middle of the event target.\n         // Firefox fires a mouse event for the context menu key.\n         if (event?.button !== 2 && event.type === 'contextmenu')\n         {\n            const rect = targetEl.getBoundingClientRect();\n            result.x = x ?? rect.left + (rect.width / 2);\n            result.y = y ?? rect.top + (rect.height / 2);\n            result.focusEl = focusEl !== void 0 ? [targetEl, focusEl] : [targetEl];\n            result.source = 'keyboard';\n         }\n         else\n         {\n            result.x = x ?? event.pageX;\n            result.y = y ?? event.pageY;\n            result.focusEl = focusEl !== void 0 ? [focusEl] : void 0;\n         }\n      }\n      else\n      {\n         const rect = targetEl.getBoundingClientRect();\n         result.x = x ?? rect.left + (rect.width / 2);\n         result.y = y ?? rect.top + (rect.height / 2);\n         result.focusEl = focusEl !== void 0 ? [targetEl, focusEl] : [targetEl];\n         result.source = 'keyboard';\n      }\n\n      return result;\n   }\n\n   /**\n    * Returns first focusable element within a specified element.\n    *\n    * @param {HTMLElement|Document} [element=document] - Optional element to start query.\n    *\n    * @param {object} [options] - Optional parameters.\n    *\n    * @param {Iterable<string>} [options.ignoreClasses] - Iterable list of classes to ignore elements.\n    *\n    * @param {Set<HTMLElement>} [options.ignoreElements] - Set of elements to ignore.\n    *\n    * @returns {HTMLElement} First focusable child element\n    */\n   static getLastFocusableElement(element = document, options)\n   {\n      const focusableElements = this.getFocusableElements(element, options);\n\n      return focusableElements.length > 0 ? focusableElements[focusableElements.length - 1] : void 0;\n   }\n\n   /**\n    * Tests if the given element is focusable.\n    *\n    * @param {HTMLElement} [el] - Element to test.\n    *\n    * @param {object} [options] - Optional parameters.\n    *\n    * @param {boolean} [options.anchorHref=true] - When true anchors must have an HREF.\n    *\n    * @param {Iterable<string>} [options.ignoreClasses] - Iterable list of classes to ignore elements.\n    *\n    * @returns {boolean} Element is focusable.\n    */\n   static isFocusable(el, { anchorHref = true, ignoreClasses } = {})\n   {\n      if (el === void 0 || el === null || !(el instanceof HTMLElement) || el?.hidden || !el?.isConnected)\n      {\n         return false;\n      }\n\n      if (typeof anchorHref !== 'boolean')\n      {\n         throw new TypeError(`'anchorHref' is not a boolean.`);\n      }\n\n      if (ignoreClasses !== void 0 && !isIterable(ignoreClasses))\n      {\n         throw new TypeError(`'ignoreClasses' is not an iterable list.`);\n      }\n\n      const contenteditableAttr = el.getAttribute('contenteditable');\n      const contenteditableFocusable = typeof contenteditableAttr === 'string' &&\n       (contenteditableAttr === '' || contenteditableAttr === 'true');\n\n      const tabindexAttr = el.getAttribute('tabindex');\n      const tabindexFocusable = typeof tabindexAttr === 'string' && tabindexAttr !== '-1';\n\n      const isAnchor = el instanceof HTMLAnchorElement;\n\n      if (contenteditableFocusable || tabindexFocusable || isAnchor || el instanceof HTMLButtonElement ||\n       el instanceof HTMLDetailsElement || el instanceof HTMLEmbedElement || el instanceof HTMLIFrameElement ||\n        el instanceof HTMLInputElement || el instanceof HTMLObjectElement || el instanceof HTMLSelectElement ||\n         el instanceof HTMLTextAreaElement)\n      {\n         if (isAnchor && anchorHref && typeof el.getAttribute('href') !== 'string')\n         {\n            return false;\n         }\n\n         return el.style.display !== 'none' && el.style.visibility !== 'hidden' && !el.hasAttribute('disabled') &&\n          !el.hasAttribute('inert') && el.getAttribute('aria-hidden') !== 'true';\n      }\n\n      return false;\n   }\n\n   /**\n    * Convenience method to check if the given data is a valid focus source.\n    *\n    * @param {HTMLElement|string}   data - Either an HTMLElement or selector string.\n    *\n    * @returns {boolean} Is valid focus source.\n    */\n   static isFocusSource(data)\n   {\n      return data instanceof HTMLElement || typeof data === 'string';\n   }\n}\n\n/**\n * @typedef {object} A11yFocusSource - Provides essential data to return focus to an HTMLElement after a series of UI\n * actions like working with context menus and modal dialogs.\n *\n * @property {boolean} [debug] - When true logs to console the actions taken in {@link A11yHelper.applyFocusSource}.\n *\n * @property {Iterable<HTMLElement|string>} [focusEl] - List of targets to attempt to focus.\n *\n * @property {string} [source] - The source of the event: 'keyboard' for instance.\n *\n * @property {number} [x] - Potential X coordinate of initial event.\n *\n * @property {number} [y] - Potential Y coordinate of initial event.\n */\n\n/**\n * Provides management of a single Promise that can be shared and accessed across JS & Svelte components. This allows a\n * Promise to be created and managed as part of the TRL application lifecycle and accessed safely in various control\n * flow scenarios. When resolution of the current managed Promise starts further interaction is prevented.\n *\n * Note: to enable debugging / log statements set the static `logging` variable to true.\n */\nclass ManagedPromise\n{\n   /** @type {boolean} */\n   static #logging = false;\n\n   /** @type {{ isProcessing?: boolean, promise?: Promise, reject: Function, resolve: Function }} */\n   #current;\n\n   /**\n    * @returns {boolean} Whether global logging is enabled.\n    */\n   static get logging()\n   {\n      return this.#logging;\n   }\n\n   /**\n    * @returns {boolean} Whether there is an active managed Promise.\n    */\n   get isActive()\n   {\n      return this.#current !== void 0;\n   }\n\n   /**\n    * @returns {boolean} Whether there is an active managed Promise and resolution is currently being processed.\n    */\n   get isProcessing()\n   {\n      return this.#current !== void 0 ? this.#current.isProcessing : false;\n   }\n\n   /**\n    * Sets global logging enabled state.\n    *\n    * @param {boolean}  logging - New logging enabled state.\n    */\n   static set logging(logging)\n   {\n      if (typeof logging !== 'boolean')\n      {\n         throw new TypeError(`[TRL] ManagedPromise.logging error: 'logging' is not a boolean.`);\n      }\n\n      this.#logging = logging;\n   }\n\n   // ----------------------------------------------------------------------------------------------------------------\n\n   /**\n    * Resolves any current Promise with undefined and creates a new current Promise.\n    *\n    * @template T\n    *\n    * @param {object} opts - Options.\n    *\n    * @param {boolean}  [opts.reuse=false] - When true if there is an existing live Promise it is returned immediately.\n    *\n    * @returns {Promise<T>} The new current managed Promise.\n    */\n   create({ reuse = false } = {})\n   {\n      if (typeof reuse !== 'boolean')\n      {\n         throw new TypeError(`[TRL] ManagedPromise.create error: 'reuse' is not a boolean.`);\n      }\n\n      if (reuse && this.#current !== void 0 && this.#current.promise instanceof Promise)\n      {\n         if (ManagedPromise.#logging)\n         {\n            console.warn(`[TRL] ManagedPromise.create info: Reusing / returning existing managed Promise.`);\n         }\n\n         return this.#current.promise;\n      }\n\n      if (this.#current !== void 0)\n      {\n         if (ManagedPromise.#logging)\n         {\n            console.warn(\n             `[TRL] ManagedPromise.create info: Creating a new Promise and resolving existing immediately.`);\n         }\n\n         this.#current.resolve(void 0);\n         this.#current = void 0;\n      }\n\n      const promise = new Promise((resolve, reject) =>\n      {\n         this.#current = {\n            isProcessing: false,\n            reject,\n            resolve\n         };\n      });\n\n      this.#current.promise = promise;\n\n      return promise;\n   }\n\n   /**\n    * Gets the current Promise if any.\n    *\n    * @returns {Promise<any>} Current Promise.\n    */\n   get()\n   {\n      return this.#current ? this.#current.promise : void 0;\n   }\n\n   /**\n    * Rejects the current Promise if applicable.\n    *\n    * @param {*}  [result] - Result to reject.\n    *\n    * @returns {boolean} Was the promise rejected.\n    */\n   reject(result = void 0)\n   {\n      // Early out as Promise resolution is currently processing.\n      if (this.#current !== void 0 && this.#current.isProcessing)\n      {\n         if (ManagedPromise.#logging)\n         {\n            console.warn(`[TRL] ManagedPromise.reject info: Currently processing promise.`);\n         }\n\n         return true;\n      }\n\n      if (this.#current !== void 0)\n      {\n         this.#current.isProcessing = true;\n\n         if (result instanceof Promise)\n         {\n            result.then((value) =>\n            {\n               this.#current.reject(value);\n               this.#current = void 0;\n            }).catch((err) =>\n            {\n               this.#current.reject(err);\n               this.#current = void 0;\n            });\n         }\n         else\n         {\n            this.#current.reject(result);\n            this.#current = void 0;\n         }\n\n         return true;\n      }\n      else\n      {\n         if (ManagedPromise.#logging)\n         {\n            console.warn(`[TRL] ManagedPromise.reject warning: No current managed Promise to reject.`);\n         }\n\n         return false;\n      }\n   }\n\n   /**\n    * Resolves the current Promise if applicable.\n    *\n    * @param {*}  [result] - Result to resolve.\n    *\n    * @returns {boolean} Was the promise resolved.\n    */\n   resolve(result = void 0)\n   {\n      // Early out as Promise resolution is currently processing.\n      if (this.#current !== void 0 && this.#current.isProcessing)\n      {\n         if (ManagedPromise.#logging)\n         {\n            console.warn(`[TRL] ManagedPromise.resolve info: Currently processing promise.`);\n         }\n\n         return true;\n      }\n\n      if (this.#current !== void 0)\n      {\n         if (result instanceof Promise)\n         {\n            this.#current.isProcessing = true;\n\n            result.then((value) =>\n            {\n               this.#current.resolve(value);\n               this.#current = void 0;\n            }).catch((err) =>\n            {\n               this.#current.reject(err);\n               this.#current = void 0;\n            });\n         }\n         else\n         {\n            this.#current.resolve(result);\n            this.#current = void 0;\n         }\n\n         return true;\n      }\n      else\n      {\n         if (ManagedPromise.#logging)\n         {\n            console.warn(`[TRL] ManagedPromise.resolve warning: No current managed Promise to resolve.`);\n         }\n\n         return false;\n      }\n   }\n}\n\n/**\n * Provides access to the Clipboard API for reading / writing text strings. This requires a secure context.\n *\n * Note: `writeText` will attempt to use the older `execCommand` if available when `navigator.clipboard` is not\n * available.\n */\nclass ClipboardAccess\n{\n   /**\n    * Uses `navigator.clipboard` if available to read text from the clipboard.\n    *\n    * Note: Always returns `undefined` when `navigator.clipboard` is not available or the clipboard contains the\n    * empty string.\n    *\n    * @returns {Promise<string|undefined>} The current clipboard text or undefined.\n    */\n   static async readText()\n   {\n      let result;\n\n      if (globalThis?.navigator?.clipboard)\n      {\n         try\n         {\n            result = await globalThis.navigator.clipboard.readText();\n         }\n         catch (err) { /**/ }\n      }\n\n      return result === '' ? void 0 : result;\n   }\n\n   /**\n    * Uses `navigator.clipboard` if available then falls back to `document.execCommand('copy')` if available to copy\n    * the given text to the clipboard.\n    *\n    * @param {string}   text - Text to copy to the browser clipboard.\n    *\n    * @returns {Promise<boolean>} Copy successful.\n    */\n   static async writeText(text)\n   {\n      if (typeof text !== 'string')\n      {\n         throw new TypeError(`ClipboardAccess.writeText error: 'text' is not a string.`);\n      }\n\n      let success = false;\n\n      if (globalThis?.navigator?.clipboard)\n      {\n         try\n         {\n            await globalThis.navigator.clipboard.writeText(text);\n            success = true;\n         }\n         catch (err) { /**/ }\n      }\n      else if (globalThis?.document?.execCommand instanceof Function)\n      {\n         const textArea = globalThis.document.createElement('textarea');\n\n         // Place in the top-left corner of screen regardless of scroll position.\n         textArea.style.position = 'fixed';\n         textArea.style.top = '0';\n         textArea.style.left = '0';\n\n         // Ensure it has a small width and height. Setting to 1px / 1em\n         // doesn't work as this gives a negative w/h on some browsers.\n         textArea.style.width = '2em';\n         textArea.style.height = '2em';\n\n         // We don't need padding, reducing the size if it does flash render.\n         textArea.style.padding = '0';\n\n         // Clean up any borders.\n         textArea.style.border = 'none';\n         textArea.style.outline = 'none';\n         textArea.style.boxShadow = 'none';\n\n         // Avoid flash of the white box if rendered for any reason.\n         textArea.style.background = 'transparent';\n\n         textArea.value = text;\n\n         globalThis.document.body.appendChild(textArea);\n         textArea.focus();\n         textArea.select();\n\n         try\n         {\n            success = document.execCommand('copy');\n         }\n         catch (err) { /**/ }\n\n         document.body.removeChild(textArea);\n      }\n\n      return success;\n   }\n}\n\n/**\n * Provides a solid string hashing algorithm.\n *\n * Sourced from: https://stackoverflow.com/a/52171480\n *\n * @param {string}   str - String to hash.\n *\n * @param {number}   seed - A seed value altering the hash.\n *\n * @returns {number} Hash code.\n */\nfunction hashCode(str, seed = 0)\n{\n   if (typeof str !== 'string') { return 0; }\n\n   let h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;\n\n   for (let ch, i = 0; i < str.length; i++)\n   {\n      ch = str.charCodeAt(i);\n      h1 = Math.imul(h1 ^ ch, 2654435761);\n      h2 = Math.imul(h2 ^ ch, 1597334677);\n   }\n\n   h1 = Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^ Math.imul(h2 ^ (h2 >>> 13), 3266489909);\n   h2 = Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^ Math.imul(h1 ^ (h1 >>> 13), 3266489909);\n\n   return 4294967296 * (2097151 & h2) + (h1 >>> 0);\n}\n\nconst s_UUIDV4_REGEX = /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i;\n\n/**\n * Generates a UUID v4 compliant ID. Please use a complete UUID generation package for guaranteed compliance.\n *\n * This code is an evolution of the following Gist.\n * https://gist.github.com/jed/982883\n *\n * There is a public domain / free copy license attached to it that is not a standard OSS license...\n * https://gist.github.com/jed/982883#file-license-txt\n *\n * @returns {string} UUIDv4\n */\nfunction uuidv4()\n{\n   return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) =>\n    (c ^ (globalThis.crypto || globalThis.msCrypto).getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16));\n}\n\n/**\n * Validates that the given string is formatted as a UUIDv4 string.\n *\n * @param {string}   uuid - UUID string to test.\n *\n * @returns {boolean} Is UUIDv4 string.\n */\nuuidv4.isValid = (uuid) => s_UUIDV4_REGEX.test(uuid);\n\n/**\n * Normalizes a string.\n *\n * @param {string}   query - A string to normalize for comparisons.\n *\n * @returns {string} Cleaned string.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\n */\nfunction normalizeString(query)\n{\n   return query.trim().normalize('NFD').replace(/[\\x00-\\x1F]/gm, ''); // eslint-disable-line no-control-regex\n}\n\n/**\n * Recursive function that finds the closest parent stacking context.\n * See also https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context\n *\n * Original author: Kerry Liu / https://github.com/gwwar\n *\n * @see https://github.com/gwwar/z-context/blob/master/content-script.js\n * @see https://github.com/gwwar/z-context/blob/master/LICENSE\n *\n * @param {Element} node -\n *\n * @returns {StackingContext} The closest parent stacking context\n */\nfunction getStackingContext(node)\n{\n   // the root element (HTML).\n   if (!node || node.nodeName === 'HTML')\n   {\n      return { node: document.documentElement, reason: 'root' };\n   }\n\n   // handle shadow root elements.\n   if (node.nodeName === '#document-fragment')\n   {\n      return getStackingContext(node.host);\n   }\n\n   const computedStyle = globalThis.getComputedStyle(node);\n\n   // position: fixed or sticky.\n   if (computedStyle.position === 'fixed' || computedStyle.position === 'sticky')\n   {\n      return { node, reason: `position: ${computedStyle.position}` };\n   }\n\n   // positioned (absolutely or relatively) with a z-index value other than \"auto\".\n   if (computedStyle.zIndex !== 'auto' && computedStyle.position !== 'static')\n   {\n      return { node, reason: `position: ${computedStyle.position}; z-index: ${computedStyle.zIndex}` };\n   }\n\n   // elements with an opacity value less than 1.\n   if (computedStyle.opacity !== '1')\n   {\n      return { node, reason: `opacity: ${computedStyle.opacity}` };\n   }\n\n   // elements with a transform value other than \"none\".\n   if (computedStyle.transform !== 'none')\n   {\n      return { node, reason: `transform: ${computedStyle.transform}` };\n   }\n\n   // elements with a mix-blend-mode value other than \"normal\".\n   if (computedStyle.mixBlendMode !== 'normal')\n   {\n      return { node, reason: `mixBlendMode: ${computedStyle.mixBlendMode}` };\n   }\n\n   // elements with a filter value other than \"none\".\n   if (computedStyle.filter !== 'none')\n   {\n      return { node, reason: `filter: ${computedStyle.filter}` };\n   }\n\n   // elements with a perspective value other than \"none\".\n   if (computedStyle.perspective !== 'none')\n   {\n      return { node, reason: `perspective: ${computedStyle.perspective}` };\n   }\n\n   // elements with a clip-path value other than \"none\".\n   if (computedStyle.clipPath !== 'none')\n   {\n      return { node, reason: `clip-path: ${computedStyle.clipPath} ` };\n   }\n\n   // elements with a mask value other than \"none\".\n   const mask = computedStyle.mask || computedStyle.webkitMask;\n   if (mask !== 'none' && mask !== undefined)\n   {\n      return { node, reason: `mask:  ${mask}` };\n   }\n\n   // elements with a mask-image value other than \"none\".\n   const maskImage = computedStyle.maskImage || computedStyle.webkitMaskImage;\n   if (maskImage !== 'none' && maskImage !== undefined)\n   {\n      return { node, reason: `mask-image: ${maskImage}` };\n   }\n\n   // elements with a mask-border value other than \"none\".\n   const maskBorder = computedStyle.maskBorder || computedStyle.webkitMaskBorder;\n   if (maskBorder !== 'none' && maskBorder !== undefined)\n   {\n      return { node, reason: `mask-border: ${maskBorder}` };\n   }\n\n   // elements with isolation set to \"isolate\".\n   if (computedStyle.isolation === 'isolate')\n   {\n      return { node, reason: `isolation: ${computedStyle.isolation}` };\n   }\n\n   // transform or opacity in will-change even if you don't specify values for these attributes directly.\n   if (computedStyle.willChange === 'transform' || computedStyle.willChange === 'opacity')\n   {\n      return { node, reason: `willChange: ${computedStyle.willChange}` };\n   }\n\n   // elements with -webkit-overflow-scrolling set to \"touch\".\n   if (computedStyle.webkitOverflowScrolling === 'touch')\n   {\n      return { node, reason: '-webkit-overflow-scrolling: touch' };\n   }\n\n   // an item with a z-index value other than \"auto\".\n   if (computedStyle.zIndex !== 'auto')\n   {\n      const parentStyle = globalThis.getComputedStyle(node.parentNode);\n      // with a flex|inline-flex parent.\n      if (parentStyle.display === 'flex' || parentStyle.display === 'inline-flex')\n      {\n         return { node, reason: `flex-item; z-index: ${computedStyle.zIndex}` };\n         // with a grid parent.\n      }\n      else if (parentStyle.grid !== 'none / none / none / row / auto / auto')\n      {\n         return { node, reason: `child of grid container; z-index: ${computedStyle.zIndex}` };\n      }\n   }\n\n   // contain with a value of layout, or paint, or a composite value that includes either of them\n   const contain = computedStyle.contain;\n   if (['layout', 'paint', 'strict', 'content'].indexOf(contain) > -1 ||\n    contain.indexOf('paint') > -1 ||\n    contain.indexOf('layout') > -1\n   )\n   {\n      return { node, reason: `contain: ${contain}` };\n   }\n\n   return getStackingContext(node.parentNode);\n}\n\n/**\n * @typedef {object} StackingContext\n *\n * @property {Element} node - A DOM Element.\n *\n * @property {string}  reason - Reason for why a stacking context was created.\n */\n\n/**\n * Provides a managed dynamic style sheet / element useful in configuring global CSS variables. When creating an\n * instance of StyleManager you must provide a \"document key\" / string for the style element added. The style element\n * can be accessed via `document[docKey]`.\n *\n * Instances of StyleManager can also be versioned by supplying a positive integer greater than or equal to `1` via the\n * 'version' option. This version number is assigned to the associated style element. When a StyleManager instance is\n * created and there is an existing instance with a version that is lower than the current instance all CSS rules are\n * removed letting the higher version to take precedence. This isn't a perfect system and requires thoughtful\n * construction of CSS variables exposed, but allows multiple independently compiled TRL packages to load the latest\n * CSS variables. It is recommended to always set `overwrite` option of {@link StyleManager.setProperty} and\n * {@link StyleManager.setProperties} to `false` when loading initial values.\n */\nclass StyleManager\n{\n   /** @type {CSSStyleRule} */\n   #cssRule;\n\n   /** @type {string} */\n   #docKey;\n\n   /** @type {string} */\n   #selector;\n\n   /** @type {HTMLStyleElement} */\n   #styleElement;\n\n   /** @type {number} */\n   #version;\n\n   /**\n    *\n    * @param {object}   opts - Options.\n    *\n    * @param {string}   opts.docKey - Required key providing a link to a specific style sheet element.\n    *\n    * @param {string}   [opts.selector=:root] - Selector element.\n    *\n    * @param {Document} [opts.document] - Target document to load styles into.\n    *\n    * @param {number}   [opts.version] - An integer representing the version / level of styles being managed.\n    *\n    */\n   constructor({ docKey, selector = ':root', document = globalThis.document, version } = {})\n   {\n      if (typeof docKey !== 'string') { throw new TypeError(`StyleManager error: 'docKey' is not a string.`); }\n\n      // TODO: Verify 'document' type from Popout FVTT module. For some reason the popout document trips this\n      //  unintentionally.\n      // if (!(document instanceof Document))\n      // {\n      //    throw new TypeError(`StyleManager error: 'document' is not an instance of Document.`);\n      // }\n\n      if (typeof selector !== 'string') { throw new TypeError(`StyleManager error: 'selector' is not a string.`); }\n\n      if (version !== void 0 && !Number.isSafeInteger(version) && version < 1)\n      {\n         throw new TypeError(`StyleManager error: 'version' is defined and is not a positive integer >= 1.`);\n      }\n\n      this.#selector = selector;\n      this.#docKey = docKey;\n      this.#version = version;\n\n      if (document[this.#docKey] === void 0)\n      {\n         this.#styleElement = document.createElement('style');\n\n         document.head.append(this.#styleElement);\n\n         // Set initial style manager version if any supplied.\n         this.#styleElement._STYLE_MANAGER_VERSION = version;\n\n         this.#styleElement.sheet.insertRule(`${selector} {}`, 0);\n\n         this.#cssRule = this.#styleElement.sheet.cssRules[0];\n\n         document[docKey] = this.#styleElement;\n      }\n      else\n      {\n         this.#styleElement = document[docKey];\n         this.#cssRule = this.#styleElement.sheet.cssRules[0];\n\n         if (version)\n         {\n            const existingVersion = this.#styleElement._STYLE_MANAGER_VERSION ?? 0;\n\n            // Remove all existing CSS rules / text if version is greater than existing version.\n            if (version > existingVersion)\n            {\n               this.#cssRule.style.cssText = '';\n            }\n         }\n      }\n   }\n\n   /**\n    * @returns {string} Provides an accessor to get the `cssText` for the style sheet.\n    */\n   get cssText()\n   {\n      return this.#cssRule.style.cssText;\n   }\n\n   /**\n    * @returns {number} Returns the version of this instance.\n    */\n   get version()\n   {\n      return this.#version;\n   }\n\n   /**\n    * Provides a copy constructor to duplicate an existing StyleManager instance into a new document.\n    *\n    * Note: This is used to support the `PopOut` module.\n    *\n    * @param {Document} [document] Target browser document to clone into.\n    *\n    * @returns {StyleManager} New style manager instance.\n    */\n   clone(document = globalThis.document)\n   {\n      const newStyleManager = new StyleManager({\n         selector: this.#selector,\n         docKey: this.#docKey,\n         document,\n         version: this.#version\n      });\n\n      newStyleManager.#cssRule.style.cssText = this.#cssRule.style.cssText;\n\n      return newStyleManager;\n   }\n\n   get()\n   {\n      const cssText = this.#cssRule.style.cssText;\n\n      const result = {};\n\n      if (cssText !== '')\n      {\n         for (const entry of cssText.split(';'))\n         {\n            if (entry !== '')\n            {\n               const values = entry.split(':');\n               result[values[0].trim()] = values[1];\n            }\n         }\n      }\n\n      return result;\n   }\n\n   /**\n    * Gets a particular CSS variable.\n    *\n    * @param {string}   key - CSS variable property key.\n    *\n    * @returns {string} Returns CSS variable value.\n    */\n   getProperty(key)\n   {\n      if (typeof key !== 'string') { throw new TypeError(`StyleManager error: 'key' is not a string.`); }\n\n      return this.#cssRule.style.getPropertyValue(key);\n   }\n\n   /**\n    * Set rules by property / value; useful for CSS variables.\n    *\n    * @param {Object<string, string>}  rules - An object with property / value string pairs to load.\n    *\n    * @param {boolean}                 [overwrite=true] - When true overwrites any existing values.\n    */\n   setProperties(rules, overwrite = true)\n   {\n      if (!isObject(rules)) { throw new TypeError(`StyleManager error: 'rules' is not an object.`); }\n\n      if (typeof overwrite !== 'boolean') { throw new TypeError(`StyleManager error: 'overwrite' is not a boolean.`); }\n\n      if (overwrite)\n      {\n         for (const [key, value] of Object.entries(rules))\n         {\n            this.#cssRule.style.setProperty(key, value);\n         }\n      }\n      else\n      {\n         // Only set property keys for entries that don't have an existing rule set.\n         for (const [key, value] of Object.entries(rules))\n         {\n            if (this.#cssRule.style.getPropertyValue(key) === '')\n            {\n               this.#cssRule.style.setProperty(key, value);\n            }\n         }\n      }\n   }\n\n   /**\n    * Sets a particular property.\n    *\n    * @param {string}   key - CSS variable property key.\n    *\n    * @param {string}   value - CSS variable value.\n    *\n    * @param {boolean}  [overwrite=true] - Overwrite any existing value.\n    */\n   setProperty(key, value, overwrite = true)\n   {\n      if (typeof key !== 'string') { throw new TypeError(`StyleManager error: 'key' is not a string.`); }\n\n      if (typeof value !== 'string') { throw new TypeError(`StyleManager error: 'value' is not a string.`); }\n\n      if (typeof overwrite !== 'boolean') { throw new TypeError(`StyleManager error: 'overwrite' is not a boolean.`); }\n\n      if (overwrite)\n      {\n         this.#cssRule.style.setProperty(key, value);\n      }\n      else\n      {\n         if (this.#cssRule.style.getPropertyValue(key) === '')\n         {\n            this.#cssRule.style.setProperty(key, value);\n         }\n      }\n   }\n\n   /**\n    * Removes the property keys specified. If `keys` is an iterable list then all property keys in the list are removed.\n    *\n    * @param {Iterable<string>} keys - The property keys to remove.\n    */\n   removeProperties(keys)\n   {\n      if (!isIterable(keys)) { throw new TypeError(`StyleManager error: 'keys' is not an iterable list.`); }\n\n      for (const key of keys)\n      {\n         if (typeof key === 'string') { this.#cssRule.style.removeProperty(key); }\n      }\n   }\n\n   /**\n    * Removes a particular CSS variable.\n    *\n    * @param {string}   key - CSS variable property key.\n    *\n    * @returns {string} CSS variable value when removed.\n    */\n   removeProperty(key)\n   {\n      if (typeof key !== 'string') { throw new TypeError(`StyleManager error: 'key' is not a string.`); }\n\n      return this.#cssRule.style.removeProperty(key);\n   }\n}\n\nconst s_REGEX = /(\\d+)\\s*px/;\n\n/**\n * Parses a pixel string / computed styles. Ex. `100px` returns `100`.\n *\n * @param {string}   value - Value to parse.\n *\n * @returns {number|undefined} The integer component of a pixel string.\n */\nfunction styleParsePixels(value)\n{\n   if (typeof value !== 'string') { return void 0; }\n\n   const isPixels = s_REGEX.test(value);\n   const number = parseInt(value);\n\n   return isPixels && Number.isFinite(number) ? number : void 0;\n}\n\n/**\n * Defines the application shell contract. If Svelte components export getter / setters for the following properties\n * then that component is considered an application shell.\n *\n * @type {string[]}\n */\nconst applicationShellContract = ['elementRoot'];\n\nObject.freeze(applicationShellContract);\n\n/**\n * Provides a method to determine if the passed in object / Svelte component follows the application shell contract.\n * This involves ensuring that the accessors defined in `applicationShellContract`.\n *\n * Note: A caveat is that when using Vite in a developer build components are wrapped in a proxy / ProxyComponent that\n * defines instance accessors versus on the prototype, so the check below ensures that all accessors in the contract are\n * either available on the prototype or directly on the instance.\n *\n * @param {*}  component - Object / component to test.\n *\n * @returns {boolean} Whether the component is a ApplicationShell or TJSApplicationShell.\n */\nfunction isApplicationShell(component)\n{\n   if (component === null || component === void 0) { return false; }\n\n   let compHasContract = true;\n   let protoHasContract = true;\n\n   // Check for accessors on the instance.\n   for (const accessor of applicationShellContract)\n   {\n      const descriptor = Object.getOwnPropertyDescriptor(component, accessor);\n      if (descriptor === void 0 || descriptor.get === void 0 || descriptor.set === void 0) { compHasContract = false; }\n   }\n\n   // Get the prototype which is the parent SvelteComponent that has any getter / setters.\n   const prototype = Object.getPrototypeOf(component);\n\n   // Verify the application shell contract. If the accessors (getters / setters) are defined for\n   // `applicationShellContract`.\n   for (const accessor of applicationShellContract)\n   {\n      const descriptor = Object.getOwnPropertyDescriptor(prototype, accessor);\n      if (descriptor === void 0 || descriptor.get === void 0 || descriptor.set === void 0) { protoHasContract = false; }\n   }\n\n   return compHasContract || protoHasContract;\n}\n\n/**\n * Provides basic duck typing to determine if the provided object is a HMR ProxyComponent instance or class.\n *\n * @param {*}  comp - Data to check as a HMR proxy component.\n *\n * @returns {boolean} Whether basic duck typing succeeds.\n */\nfunction isHMRProxy(comp)\n{\n   const instanceName = comp?.constructor?.name;\n   if (typeof instanceName === 'string' && (instanceName.startsWith('Proxy<') || instanceName === 'ProxyComponent'))\n   {\n      return true;\n   }\n\n   const prototypeName = comp?.prototype?.constructor?.name;\n   return typeof prototypeName === 'string' && (prototypeName.startsWith('Proxy<') ||\n    prototypeName === 'ProxyComponent');\n}\n\n/**\n * Provides basic duck typing to determine if the provided function is a constructor function for a Svelte component.\n *\n * @param {*}  comp - Data to check as a Svelte component.\n *\n * @returns {boolean} Whether basic duck typing succeeds.\n */\nfunction isSvelteComponent(comp)\n{\n   if (comp === null || comp === void 0 || typeof comp !== 'function') { return false; }\n\n   // When using Vite in a developer build the SvelteComponent is wrapped in a ProxyComponent class.\n   // This class doesn't define methods on the prototype, so we must check if the constructor name\n   // starts with `Proxy<` as it provides the wrapped component as `Proxy<_wrapped component name_>`.\n   const prototypeName = comp?.prototype?.constructor?.name;\n   if (typeof prototypeName === 'string' && (prototypeName.startsWith('Proxy<') || prototypeName === 'ProxyComponent'))\n   {\n      return true;\n   }\n\n   return typeof window !== void 0 ?\n    typeof comp.prototype.$destroy === 'function' && typeof comp.prototype.$on === 'function' : // client-side\n     typeof comp.render === 'function'; // server-side\n}\n\n/**\n * Runs outro transition then destroys Svelte component.\n *\n * Workaround for https://github.com/sveltejs/svelte/issues/4056\n *\n * @param {*}  instance - A Svelte component.\n */\nasync function outroAndDestroy(instance)\n{\n   return new Promise((resolve) =>\n   {\n      if (instance.$$.fragment && instance.$$.fragment.o)\n      {\n         group_outros();\n         transition_out(instance.$$.fragment, 0, 0, () =>\n         {\n            instance.$destroy();\n            resolve();\n         });\n         check_outros();\n      }\n      else\n      {\n         instance.$destroy();\n         resolve();\n      }\n   });\n}\n\n/**\n * Parses a TyphonJS Svelte config object ensuring that classes specified are Svelte components and props are set\n * correctly.\n *\n * @param {object}   config - Svelte config object.\n *\n * @param {*}        [thisArg] - `This` reference to set for invoking any props function.\n *\n * @returns {object} The processed Svelte config object.\n */\nfunction parseSvelteConfig(config, thisArg = void 0)\n{\n   if (typeof config !== 'object')\n   {\n      throw new TypeError(`parseSvelteConfig - 'config' is not an object:\\n${JSON.stringify(config)}.`);\n   }\n\n   if (!isSvelteComponent(config.class))\n   {\n      throw new TypeError(\n       `parseSvelteConfig - 'class' is not a Svelte component constructor for config:\\n${JSON.stringify(config)}.`);\n   }\n\n   if (config.hydrate !== void 0 && typeof config.hydrate !== 'boolean')\n   {\n      throw new TypeError(\n       `parseSvelteConfig - 'hydrate' is not a boolean for config:\\n${JSON.stringify(config)}.`);\n   }\n\n   if (config.intro !== void 0 && typeof config.intro !== 'boolean')\n   {\n      throw new TypeError(\n       `parseSvelteConfig - 'intro' is not a boolean for config:\\n${JSON.stringify(config)}.`);\n   }\n\n   if (config.target !== void 0 && typeof config.target !== 'string' && !(config.target instanceof HTMLElement) &&\n    !(config.target instanceof ShadowRoot) && !(config.target instanceof DocumentFragment))\n   {\n      throw new TypeError(\n       `parseSvelteConfig - 'target' is not a string, HTMLElement, ShadowRoot, or DocumentFragment for config:\\n${\n        JSON.stringify(config)}.`);\n   }\n\n   if (config.anchor !== void 0 && typeof config.anchor !== 'string' && !(config.anchor instanceof HTMLElement) &&\n    !(config.anchor instanceof ShadowRoot) && !(config.anchor instanceof DocumentFragment))\n   {\n      throw new TypeError(\n       `parseSvelteConfig - 'anchor' is not a string, HTMLElement, ShadowRoot, or DocumentFragment for config:\\n${\n        JSON.stringify(config)}.`);\n   }\n\n   if (config.context !== void 0 && typeof config.context !== 'function' && !(config.context instanceof Map) &&\n    typeof config.context !== 'object')\n   {\n      throw new TypeError(\n       `parseSvelteConfig - 'context' is not a Map, function or object for config:\\n${JSON.stringify(config)}.`);\n   }\n\n   // Validate extra TyphonJS options --------------------------------------------------------------------------------\n\n   // `selectorTarget` optionally stores a target element found in main element.\n   if (config.selectorTarget !== void 0 && typeof config.selectorTarget !== 'string')\n   {\n      throw new TypeError(\n       `parseSvelteConfig - 'selectorTarget' is not a string for config:\\n${JSON.stringify(config)}.`);\n   }\n\n   // `options` stores `injectApp`, `injectEventbus`, and `selectorElement`.\n   if (config.options !== void 0 && typeof config.options !== 'object')\n   {\n      throw new TypeError(\n       `parseSvelteConfig - 'options' is not an object for config:\\n${JSON.stringify(config)}.`);\n   }\n\n   // Validate TyphonJS standard options.\n   if (config.options !== void 0)\n   {\n      if (config.options.injectApp !== void 0 && typeof config.options.injectApp !== 'boolean')\n      {\n         throw new TypeError(\n          `parseSvelteConfig - 'options.injectApp' is not a boolean for config:\\n${JSON.stringify(config)}.`);\n      }\n\n      if (config.options.injectEventbus !== void 0 && typeof config.options.injectEventbus !== 'boolean')\n      {\n         throw new TypeError(\n          `parseSvelteConfig - 'options.injectEventbus' is not a boolean for config:\\n${JSON.stringify(config)}.`);\n      }\n\n      // `selectorElement` optionally stores a main element selector to be found in a HTMLElement target.\n      if (config.options.selectorElement !== void 0 && typeof config.options.selectorElement !== 'string')\n      {\n         throw new TypeError(\n          `parseSvelteConfig - 'selectorElement' is not a string for config:\\n${JSON.stringify(config)}.`);\n      }\n   }\n\n   const svelteConfig = { ...config };\n\n   // Delete extra Svelte options.\n   delete svelteConfig.options;\n\n   let externalContext = {};\n\n   // If a context callback function is provided then invoke it with `this` being the Foundry app.\n   // If an object is returned it adds the entries to external context.\n   if (typeof svelteConfig.context === 'function')\n   {\n      const contextFunc = svelteConfig.context;\n      delete svelteConfig.context;\n\n      const result = contextFunc.call(thisArg);\n      if (isObject(result))\n      {\n         externalContext = { ...result };\n      }\n      else\n      {\n         throw new Error(`parseSvelteConfig - 'context' is a function that did not return an object for config:\\n${\n          JSON.stringify(config)}`);\n      }\n   }\n   else if (svelteConfig.context instanceof Map)\n   {\n      externalContext = Object.fromEntries(svelteConfig.context);\n      delete svelteConfig.context;\n   }\n   else if (isObject(svelteConfig.context))\n   {\n      externalContext = svelteConfig.context;\n      delete svelteConfig.context;\n   }\n\n   // If a props is a function then invoke it with `this` being the Foundry app.\n   // If an object is returned set it as the props.\n   svelteConfig.props = s_PROCESS_PROPS(svelteConfig.props, thisArg, config);\n\n   // Process children components attaching to external context.\n   if (Array.isArray(svelteConfig.children))\n   {\n      const children = [];\n\n      for (let cntr = 0; cntr < svelteConfig.children.length; cntr++)\n      {\n         const child = svelteConfig.children[cntr];\n\n         if (!isSvelteComponent(child.class))\n         {\n            throw new Error(`parseSvelteConfig - 'class' is not a Svelte component for child[${cntr}] for config:\\n${\n             JSON.stringify(config)}`);\n         }\n\n         child.props = s_PROCESS_PROPS(child.props, thisArg, config);\n\n         children.push(child);\n      }\n\n      if (children.length > 0)\n      {\n         externalContext.children = children;\n      }\n\n      delete svelteConfig.children;\n   }\n   else if (isObject(svelteConfig.children))\n   {\n      if (!isSvelteComponent(svelteConfig.children.class))\n      {\n         throw new Error(`parseSvelteConfig - 'class' is not a Svelte component for children object for config:\\n${\n          JSON.stringify(config)}`);\n      }\n\n      svelteConfig.children.props = s_PROCESS_PROPS(svelteConfig.children.props, thisArg, config);\n\n      externalContext.children = [svelteConfig.children];\n      delete svelteConfig.children;\n   }\n\n   if (!(svelteConfig.context instanceof Map))\n   {\n      svelteConfig.context = new Map();\n   }\n\n   svelteConfig.context.set('#external', externalContext);\n\n   return svelteConfig;\n}\n\n/**\n * Processes Svelte props. Potentially props can be a function to invoke with `thisArg`.\n *\n * @param {object|Function}   props - Svelte props.\n *\n * @param {*}                 thisArg - `This` reference to set for invoking any props function.\n *\n * @param {object}            config - Svelte config\n *\n * @returns {object|void}     Svelte props.\n */\nfunction s_PROCESS_PROPS(props, thisArg, config)\n{\n   // If a props is a function then invoke it with `this` being the Foundry app.\n   // If an object is returned set it as the props.\n   if (typeof props === 'function')\n   {\n      const result = props.call(thisArg);\n      if (isObject(result))\n      {\n         return result;\n      }\n      else\n      {\n         throw new Error(`parseSvelteConfig - 'props' is a function that did not return an object for config:\\n${\n          JSON.stringify(config)}`);\n      }\n   }\n   else if (isObject(props))\n   {\n      return props;\n   }\n   else if (props !== void 0)\n   {\n      throw new Error(\n       `parseSvelteConfig - 'props' is not a function or an object for config:\\n${JSON.stringify(config)}`);\n   }\n\n   return {};\n}\n\n/**\n * Wraps a callback in a debounced timeout.\n *\n * Delay execution of the callback function until the function has not been called for the given delay in milliseconds.\n *\n * @param {Function} callback - A function to execute once the debounced threshold has been passed.\n *\n * @param {number}   delay - An amount of time in milliseconds to delay.\n *\n * @returns {Function} A wrapped function that can be called to debounce execution.\n */\nfunction debounce(callback, delay)\n{\n   let timeoutId;\n\n   return function(...args)\n   {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => { callback.apply(this, args); }, delay);\n   };\n}\n\n/**\n * Provides a method to determine if the passed in Svelte component has a getter accessor.\n *\n * @param {*}        object - An object.\n *\n * @param {string}   accessor - Accessor to test.\n *\n * @returns {boolean} Whether the component has the getter for accessor.\n */\nfunction hasGetter(object, accessor)\n{\n   if (object === null || object === void 0) { return false; }\n\n   // Check for instance accessor.\n   const iDescriptor = Object.getOwnPropertyDescriptor(object, accessor);\n   if (iDescriptor !== void 0 && iDescriptor.get !== void 0) { return true; }\n\n   // Walk parent prototype chain. Check for descriptor at each prototype level.\n   for (let o = Object.getPrototypeOf(object); o; o = Object.getPrototypeOf(o))\n   {\n      const descriptor = Object.getOwnPropertyDescriptor(o, accessor);\n      if (descriptor !== void 0 && descriptor.get !== void 0) { return true; }\n   }\n\n   return false;\n}\n\n/**\n * Provides a method to determine if the passed in Svelte component has a getter & setter accessor.\n *\n * @param {*}        object - An object.\n *\n * @param {string}   accessor - Accessor to test.\n *\n * @returns {boolean} Whether the component has the getter and setter for accessor.\n */\nfunction hasAccessor(object, accessor)\n{\n   if (object === null || object === void 0) { return false; }\n\n   // Check for instance accessor.\n   const iDescriptor = Object.getOwnPropertyDescriptor(object, accessor);\n   if (iDescriptor !== void 0 && iDescriptor.get !== void 0 && iDescriptor.set !== void 0) { return true; }\n\n   // Walk parent prototype chain. Check for descriptor at each prototype level.\n   for (let o = Object.getPrototypeOf(object); o; o = Object.getPrototypeOf(o))\n   {\n      const descriptor = Object.getOwnPropertyDescriptor(o, accessor);\n      if (descriptor !== void 0 && descriptor.get !== void 0 && descriptor.set !== void 0) { return true; }\n   }\n\n   return false;\n}\n\n/**\n * Provides a method to determine if the passed in Svelte component has a setter accessor.\n *\n * @param {*}        object - An object.\n *\n * @param {string}   accessor - Accessor to test.\n *\n * @returns {boolean} Whether the component has the setter for accessor.\n */\nfunction hasSetter(object, accessor)\n{\n   if (object === null || object === void 0) { return false; }\n\n   // Check for instance accessor.\n   const iDescriptor = Object.getOwnPropertyDescriptor(object, accessor);\n   if (iDescriptor !== void 0 && iDescriptor.set !== void 0) { return true; }\n\n   // Walk parent prototype chain. Check for descriptor at each prototype level.\n   for (let o = Object.getPrototypeOf(object); o; o = Object.getPrototypeOf(o))\n   {\n      const descriptor = Object.getOwnPropertyDescriptor(o, accessor);\n      if (descriptor !== void 0 && descriptor.set !== void 0) { return true; }\n   }\n\n   return false;\n}\n\n/**\n * Returns whether the target is or has the given prototype walking up the prototype chain.\n *\n * @param {*}  target - Any target to test.\n *\n * @param {Function} Prototype - Prototype function / class constructor to find.\n *\n * @returns {boolean} Target matches prototype.\n */\nfunction hasPrototype(target, Prototype)\n{\n   /* c8 ignore next */\n   if (typeof target !== 'function') { return false; }\n\n   if (target === Prototype) { return true; }\n\n   // Walk parent prototype chain. Check for descriptor at each prototype level.\n   for (let proto = Object.getPrototypeOf(target); proto; proto = Object.getPrototypeOf(proto))\n   {\n      if (proto === Prototype) { return true; }\n   }\n\n   return false;\n}\n\nfunction set(obj, key, val) {\n\tif (typeof val.value === 'object') val.value = klona(val.value);\n\tif (!val.enumerable || val.get || val.set || !val.configurable || !val.writable || key === '__proto__') {\n\t\tObject.defineProperty(obj, key, val);\n\t} else obj[key] = val.value;\n}\n\nfunction klona(x) {\n\tif (typeof x !== 'object') return x;\n\n\tvar i=0, k, list, tmp, str=Object.prototype.toString.call(x);\n\n\tif (str === '[object Object]') {\n\t\ttmp = Object.create(x.__proto__ || null);\n\t} else if (str === '[object Array]') {\n\t\ttmp = Array(x.length);\n\t} else if (str === '[object Set]') {\n\t\ttmp = new Set;\n\t\tx.forEach(function (val) {\n\t\t\ttmp.add(klona(val));\n\t\t});\n\t} else if (str === '[object Map]') {\n\t\ttmp = new Map;\n\t\tx.forEach(function (val, key) {\n\t\t\ttmp.set(klona(key), klona(val));\n\t\t});\n\t} else if (str === '[object Date]') {\n\t\ttmp = new Date(+x);\n\t} else if (str === '[object RegExp]') {\n\t\ttmp = new RegExp(x.source, x.flags);\n\t} else if (str === '[object DataView]') {\n\t\ttmp = new x.constructor( klona(x.buffer) );\n\t} else if (str === '[object ArrayBuffer]') {\n\t\ttmp = x.slice(0);\n\t} else if (str.slice(-6) === 'Array]') {\n\t\t// ArrayBuffer.isView(x)\n\t\t// ~> `new` bcuz `Buffer.slice` => ref\n\t\ttmp = new x.constructor(x);\n\t}\n\n\tif (tmp) {\n\t\tfor (list=Object.getOwnPropertySymbols(x); i < list.length; i++) {\n\t\t\tset(tmp, list[i], Object.getOwnPropertyDescriptor(x, list[i]));\n\t\t}\n\n\t\tfor (i=0, list=Object.getOwnPropertyNames(x); i < list.length; i++) {\n\t\t\tif (Object.hasOwnProperty.call(tmp, k=list[i]) && tmp[k] === x[k]) continue;\n\t\t\tset(tmp, k, Object.getOwnPropertyDescriptor(x, k));\n\t\t}\n\t}\n\n\treturn tmp || x;\n}\n\nfunction isSpace(character) {\n    return character == \" \" || character == \"\\n\" || character == \"\\r\" || character == \"\\t\";\n}\nfunction isQuote(character) {\n    return character == '\"' || character == \"'\";\n}\nconst TAG_START = \"<\";\nconst TAG_END = \">\";\nconst ENCODED_TAG_START = \"&lt;\";\nconst ENCODED_TAG_END = \"&gt;\";\nclass InPlaintextState {\n    constructor(options) {\n        this.options = options;\n    }\n    consume(character, transition) {\n        if (character == TAG_START) {\n            transition(new InTagNameState(this.options));\n            return \"\";\n        }\n        else if (character == TAG_END && this.options.encodePlaintextTagDelimiters) {\n            return ENCODED_TAG_END;\n        }\n        return character;\n    }\n}\nclass InTagNameState {\n    constructor(options) {\n        this.options = options;\n        this.nameBuffer = \"\";\n        this.isClosingTag = false;\n    }\n    consume(character, transition) {\n        if (this.nameBuffer.length == 0) {\n            if (isSpace(character)) {\n                transition(new InPlaintextState(this.options));\n                return ((this.options.encodePlaintextTagDelimiters ? ENCODED_TAG_START : \"<\") +\n                    character);\n            }\n            if (character == \"/\") {\n                this.isClosingTag = true;\n                return \"\";\n            }\n        }\n        if (isSpace(character)) {\n            if (this.isNameBufferAnAllowedTag()) {\n                transition(new InTagState(0 /* TagMode.Allowed */, this.options));\n                return TAG_START + (this.isClosingTag ? \"/\" : \"\") + this.nameBuffer + character;\n            }\n            else {\n                transition(new InTagState(1 /* TagMode.Disallowed */, this.options));\n                return this.options.tagReplacementText;\n            }\n        }\n        if (character == TAG_START) {\n            this.nameBuffer += ENCODED_TAG_START;\n            return \"\";\n        }\n        if (character == TAG_END) {\n            transition(new InPlaintextState(this.options));\n            if (this.isNameBufferAnAllowedTag()) {\n                return TAG_START + (this.isClosingTag ? \"/\" : \"\") + this.nameBuffer + character;\n            }\n            else {\n                return this.options.tagReplacementText;\n            }\n        }\n        if (character == \"-\" && this.nameBuffer == \"!-\") {\n            transition(new InCommentState(this.options));\n            return \"\";\n        }\n        this.nameBuffer += character;\n        return \"\";\n    }\n    isNameBufferAnAllowedTag() {\n        const tagName = this.nameBuffer.toLowerCase();\n        if (this.options.allowedTags) {\n            return this.options.allowedTags.has(tagName);\n        }\n        else if (this.options.disallowedTags) {\n            return !this.options.disallowedTags.has(tagName);\n        }\n        else {\n            return false;\n        }\n    }\n}\nclass InTagState {\n    constructor(mode, options) {\n        this.mode = mode;\n        this.options = options;\n    }\n    consume(character, transition) {\n        if (character == TAG_END) {\n            transition(new InPlaintextState(this.options));\n        }\n        else if (isQuote(character)) {\n            transition(new InQuotedStringInTagState(this.mode, character, this.options));\n        }\n        if (this.mode == 1 /* TagMode.Disallowed */) {\n            return \"\";\n        }\n        if (character == TAG_START) {\n            return ENCODED_TAG_START;\n        }\n        else {\n            return character;\n        }\n    }\n}\nclass InQuotedStringInTagState {\n    constructor(mode, quoteCharacter, options) {\n        this.mode = mode;\n        this.quoteCharacter = quoteCharacter;\n        this.options = options;\n    }\n    consume(character, transition) {\n        if (character == this.quoteCharacter) {\n            transition(new InTagState(this.mode, this.options));\n        }\n        if (this.mode == 1 /* TagMode.Disallowed */) {\n            return \"\";\n        }\n        if (character == TAG_START) {\n            return ENCODED_TAG_START;\n        }\n        else if (character == TAG_END) {\n            return ENCODED_TAG_END;\n        }\n        else {\n            return character;\n        }\n    }\n}\nclass InCommentState {\n    constructor(options) {\n        this.options = options;\n        this.consecutiveHyphens = 0;\n    }\n    consume(character, transition) {\n        if (character == \">\" && this.consecutiveHyphens >= 2) {\n            transition(new InPlaintextState(this.options));\n        }\n        else if (character == \"-\") {\n            this.consecutiveHyphens++;\n        }\n        else {\n            this.consecutiveHyphens = 0;\n        }\n        return \"\";\n    }\n}\n\nconst DefaultStateMachineOptions = {\n    tagReplacementText: \"\",\n    encodePlaintextTagDelimiters: true,\n};\nclass StateMachine {\n    constructor(partialOptions = {}) {\n        this.state = new InPlaintextState(Object.assign(Object.assign({}, DefaultStateMachineOptions), partialOptions));\n        this.transitionFunction = ((next) => {\n            this.state = next;\n        }).bind(this);\n    }\n    consume(text) {\n        let outputBuffer = \"\";\n        for (const character of text) {\n            outputBuffer += this.state.consume(character, this.transitionFunction);\n        }\n        return outputBuffer;\n    }\n}\nfunction striptags(text, options = {}) {\n    return new StateMachine(options).consume(text);\n}\n\n/**\n * Attempts to create a Foundry UUID from standard drop data. This may not work for all systems.\n *\n * @param {object}   data - Drop transfer data.\n *\n * @param {ParseDataTransferOptions}   opts - Optional parameters.\n *\n * @returns {string|undefined} Foundry UUID for drop data.\n */\nfunction getUUIDFromDataTransfer(data, { actor = true, compendium = true, world = true, types = void 0 } = {})\n{\n   if (typeof data !== 'object') { return void 0; }\n   if (Array.isArray(types) && !types.includes(data.type)) { return void 0; }\n\n   let uuid = void 0;\n\n   if (typeof data.uuid === 'string') // v10 and above provides a full UUID.\n   {\n      const isCompendium = data.uuid.startsWith('Compendium');\n\n      if (isCompendium && compendium)\n      {\n         uuid = data.uuid;\n      }\n      else if (world)\n      {\n         uuid = data.uuid;\n      }\n   }\n   else // v9 and below parsing.\n   {\n      if (actor && world && data.actorId && data.type)\n      {\n         uuid = `Actor.${data.actorId}.${data.type}.${data.data._id}`;\n      }\n      else if (typeof data.id === 'string') // v9 and below uses `id`\n      {\n         if (compendium && typeof data.pack === 'string')\n         {\n            uuid = `Compendium.${data.pack}.${data.id}`;\n         }\n         else if (world)\n         {\n            uuid = `${data.type}.${data.id}`;\n         }\n      }\n   }\n\n   return uuid;\n}\n\n/**\n * @typedef {object} ParseDataTransferOptions\n *\n * @property {boolean}  [actor=true] - Accept actor owned documents.\n *\n * @property {boolean}  [compendium=true] - Accept compendium documents.\n *\n * @property {boolean}  [world=true] - Accept world documents.\n *\n * @property {string[]|undefined}   [types] - Require the `data.type` to match entry in `types`.\n */\n\nexport { A11yHelper, ClipboardAccess, ManagedPromise, StyleManager, debounce, deepMerge, getStackingContext, getUUIDFromDataTransfer, hasAccessor, hasGetter, hasPrototype, hasSetter, hashCode, isApplicationShell, isHMRProxy, isIterable, isIterableAsync, isObject, isPlainObject, isSvelteComponent, klona, normalizeString, outroAndDestroy, parseSvelteConfig, safeAccess, safeSet, striptags, styleParsePixels, uuidv4 };\n//# sourceMappingURL=index.js.map\n", "import { isIterable, hasPrototype, isObject } from '@typhonjs-fvtt/svelte/util';\nimport { derived, get, writable as writable$2 } from 'svelte/store';\nimport { noop, run_all, is_function } from 'svelte/internal';\nimport { uuidv4, isPlainObject, getUUIDFromDataTransfer, isObject as isObject$1 } from '@typhonjs-fvtt/svelte/util';\n\nclass DynReducerUtils {\n    /**\n     * Checks for array equality between two arrays of numbers.\n     *\n     * @param a - Array A\n     *\n     * @param b - Array B\n     *\n     * @returns Arrays are equal.\n     */\n    static arrayEquals(a, b) {\n        if (a === b) {\n            return true;\n        }\n        if (a === null || b === null) {\n            return false;\n        }\n        /* c8 ignore next */\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (let cntr = a.length; --cntr >= 0;) {\n            /* c8 ignore next */\n            if (a[cntr] !== b[cntr]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Provides a solid string hashing algorithm.\n     *\n     * Sourced from: https://stackoverflow.com/a/52171480\n     *\n     * @param str - String to hash.\n     *\n     * @param seed - A seed value altering the hash.\n     *\n     * @returns Hash code.\n     */\n    static hashString(str, seed = 0) {\n        let h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;\n        for (let ch, i = 0; i < str.length; i++) {\n            ch = str.charCodeAt(i);\n            h1 = Math.imul(h1 ^ ch, 2654435761);\n            h2 = Math.imul(h2 ^ ch, 1597334677);\n        }\n        h1 = Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^ Math.imul(h2 ^ (h2 >>> 13), 3266489909);\n        h2 = Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^ Math.imul(h1 ^ (h1 >>> 13), 3266489909);\n        return 4294967296 * (2097151 & h2) + (h1 >>> 0);\n    }\n    /**\n     * Converts an unknown value for hashing purposes in {@link AdapterIndexer.calcHashUpdate}.\n     *\n     * Currently objects / Map w/ object keys is not supported. Potentially can include `object-hash` to handle this\n     * case, but it is not common to use objects as keys in Maps.\n     *\n     * @param value - An unknown value to convert to a number.\n     */\n    static hashUnknown(value) {\n        if (value === null || value === void 0) {\n            return 0;\n        }\n        let result = 0;\n        switch (typeof value) {\n            case 'boolean':\n                result = value ? 1 : 0;\n                break;\n            case 'bigint':\n                result = Number(BigInt.asIntN(64, value));\n                break;\n            case 'function':\n                result = this.hashString(value.name);\n                break;\n            case 'number':\n                result = Number.isFinite(value) ? value : 0;\n                break;\n            case 'object':\n                // TODO: consider hashing an object IE `object-hash` and convert to number.\n                break;\n            case 'string':\n                result = this.hashString(value);\n                break;\n            case 'symbol':\n                result = this.hashString(Symbol.keyFor(value));\n                break;\n        }\n        return result;\n    }\n    /**\n     * @param target -\n     *\n     * @param Prototype -\n     *\n     * @returns target constructor function has Prototype.\n     */\n    static hasPrototype(target, Prototype) {\n        /* c8 ignore next */\n        if (typeof target !== 'function') {\n            return false;\n        }\n        if (target === Prototype) {\n            return true;\n        }\n        // Walk parent prototype chain. Check for descriptor at each prototype level.\n        for (let proto = Object.getPrototypeOf(target); proto; proto = Object.getPrototypeOf(proto)) {\n            if (proto === Prototype) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Provides a utility method to determine if the given data is iterable / implements iterator protocol.\n     *\n     * @param data - Data to verify as iterable.\n     *\n     * @returns Is data iterable.\n     */\n    static isIterable(data) {\n        return data !== null && data !== void 0 && typeof data === 'object' &&\n            typeof data[Symbol.iterator] === 'function';\n    }\n}\n\n/**\n * Provides the `derived` API for all dynamic reducers.\n */\nclass AdapterDerived {\n    #hostData;\n    #DerivedReducerCtor;\n    #parentIndex;\n    #derived = new Map();\n    #destroyed = false;\n    /**\n     * @param hostData - Hosted data structure.\n     *\n     * @param parentIndex - Any associated parent index API.\n     *\n     * @param DerivedReducerCtor - The default derived reducer constructor function.\n     */\n    constructor(hostData, parentIndex, DerivedReducerCtor) {\n        this.#hostData = hostData;\n        this.#parentIndex = parentIndex;\n        this.#DerivedReducerCtor = DerivedReducerCtor;\n        Object.freeze(this);\n    }\n    /**\n     * Creates a new derived reducer.\n     *\n     * @param options - Options defining the new derived reducer.\n     *\n     * @returns Newly created derived reducer.\n     */\n    create(options) {\n        if (this.#destroyed) {\n            throw Error(`AdapterDerived.create error: this instance has been destroyed.`);\n        }\n        let name;\n        let rest = {};\n        let ctor;\n        const DerivedReducerCtor = this.#DerivedReducerCtor;\n        if (typeof options === 'string') {\n            name = options;\n            ctor = DerivedReducerCtor;\n        }\n        else if (typeof options === 'function' && DynReducerUtils.hasPrototype(options, DerivedReducerCtor)) {\n            ctor = options;\n        }\n        else if (typeof options === 'object' && options !== null) {\n            ({ name, ctor = DerivedReducerCtor, ...rest } = options);\n        }\n        else {\n            throw new TypeError(`AdapterDerived.create error: 'options' does not conform to allowed parameters.`);\n        }\n        if (!DynReducerUtils.hasPrototype(ctor, DerivedReducerCtor)) {\n            throw new TypeError(`AdapterDerived.create error: 'ctor' is not a '${DerivedReducerCtor?.name}'.`);\n        }\n        name = name ?? ctor?.name;\n        if (typeof name !== 'string') {\n            throw new TypeError(`AdapterDerived.create error: 'name' is not a string.`);\n        }\n        const derivedReducer = new ctor(this.#hostData, this.#parentIndex, rest);\n        this.#derived.set(name, derivedReducer);\n        return derivedReducer;\n    }\n    /**\n     * Removes all derived reducers and associated subscriptions.\n     */\n    clear() {\n        if (this.#destroyed) {\n            return;\n        }\n        for (const reducer of this.#derived.values()) {\n            reducer.destroy();\n        }\n        this.#derived.clear();\n    }\n    /**\n     * Deletes and destroys a derived reducer by name.\n     *\n     * @param name - Name of the derived reducer.\n     */\n    delete(name) {\n        if (this.#destroyed) {\n            throw Error(`AdapterDerived.delete error: this instance has been destroyed.`);\n        }\n        const reducer = this.#derived.get(name);\n        if (reducer) {\n            reducer.destroy();\n        }\n        return this.#derived.delete(name);\n    }\n    /**\n     * Removes all derived reducers, subscriptions, and cleans up all resources.\n     */\n    destroy() {\n        if (this.#destroyed) {\n            return;\n        }\n        this.clear();\n        this.#hostData = [null];\n        this.#parentIndex = null;\n        this.#destroyed = true;\n    }\n    /**\n     * Returns an existing derived reducer.\n     *\n     * @param name - Name of derived reducer.\n     */\n    get(name) {\n        if (this.#destroyed) {\n            throw Error(`AdapterDerived.get error: this instance has been destroyed.`);\n        }\n        return this.#derived.get(name);\n    }\n    /**\n     * Updates all managed derived reducer indexes.\n     *\n     * @param [force] - Force an update to subscribers.\n     */\n    update(force = false) {\n        if (this.#destroyed) {\n            return;\n        }\n        for (const reducer of this.#derived.values()) {\n            reducer.index.update(force);\n        }\n    }\n}\n\n/**\n * Provides the storage and sequencing of managed filters. Each filter added may be a bespoke function or a\n * {@link DataFilter} object containing an `id`, `filter`, and `weight` attributes; `filter` is the only required\n * attribute.\n *\n * The `id` attribute can be anything that creates a unique ID for the filter; recommended strings or numbers. This\n * allows filters to be removed by ID easily.\n *\n * The `weight` attribute is a number between 0 and 1 inclusive that allows filters to be added in a\n * predictable order which is especially handy if they are manipulated at runtime. A lower weighted filter always runs\n * before a higher weighted filter. For speed and efficiency always set the heavier / more inclusive filter with a\n * lower weight; an example of this is a keyword / name that will filter out many entries making any further filtering\n * faster. If no weight is specified the default of '1' is assigned and it is appended to the end of the filters list.\n *\n * This class forms the public API which is accessible from the `.filters` getter in the main reducer implementation.\n * ```\n * const dynArray = new DynArrayReducer([...]);\n * dynArray.filters.add(...);\n * dynArray.filters.clear();\n * dynArray.filters.length;\n * dynArray.filters.remove(...);\n * dynArray.filters.removeBy(...);\n * dynArray.filters.removeById(...);\n * ```\n */\nclass AdapterFilters {\n    #filtersData;\n    #indexUpdate;\n    #mapUnsubscribe = new Map();\n    /**\n     * @param indexUpdate - update function for the indexer.\n     *\n     * @param filtersAdapter - Stores the filter function data.\n     */\n    constructor(indexUpdate, filtersAdapter) {\n        this.#indexUpdate = indexUpdate;\n        this.#filtersData = filtersAdapter;\n        Object.freeze(this);\n    }\n    /**\n     * @returns Returns the length of the filter data.\n     */\n    get length() { return this.#filtersData.filters.length; }\n    /**\n     * Provides an iterator for filters.\n     *\n     * @returns Generator / iterator of filters.\n     * @yields {DataFilter<T>}\n     */\n    *[Symbol.iterator]() {\n        if (this.#filtersData.filters.length === 0) {\n            return;\n        }\n        for (const entry of this.#filtersData.filters) {\n            yield { ...entry };\n        }\n    }\n    /**\n     * @param filters -\n     */\n    add(...filters) {\n        /**\n         * Tracks the number of filters added that have subscriber functionality.\n         */\n        let subscribeCount = 0;\n        for (const filter of filters) {\n            const filterType = typeof filter;\n            if (filterType !== 'function' && (filterType !== 'object' || filter === null)) {\n                throw new TypeError(`AdapterFilters error: 'filter' is not a function or object.`);\n            }\n            let data = void 0;\n            let subscribeFn = void 0;\n            if (filterType === 'function') {\n                data = {\n                    id: void 0,\n                    filter,\n                    weight: 1\n                };\n                subscribeFn = filter.subscribe;\n            }\n            else if (filterType === 'object') {\n                if ('filter' in filter) {\n                    if (typeof filter.filter !== 'function') {\n                        throw new TypeError(`AdapterFilters error: 'filter' attribute is not a function.`);\n                    }\n                    if (filter.weight !== void 0 && typeof filter.weight !== 'number' ||\n                        (filter.weight < 0 || filter.weight > 1)) {\n                        throw new TypeError(`AdapterFilters error: 'weight' attribute is not a number between '0 - 1' inclusive.`);\n                    }\n                    data = {\n                        id: filter.id !== void 0 ? filter.id : void 0,\n                        filter: filter.filter,\n                        weight: filter.weight || 1\n                    };\n                    subscribeFn = filter.filter.subscribe ?? filter.subscribe;\n                }\n                else {\n                    throw new TypeError(`AdapterFilters error: 'filter' attribute is not a function.`);\n                }\n            }\n            // Find the index to insert where data.weight is less than existing values weight.\n            const index = this.#filtersData.filters.findIndex((value) => {\n                return data.weight < value.weight;\n            });\n            // If an index was found insert at that location.\n            if (index >= 0) {\n                this.#filtersData.filters.splice(index, 0, data);\n            }\n            else // push to end of filters.\n             {\n                this.#filtersData.filters.push(data);\n            }\n            if (typeof subscribeFn === 'function') {\n                const unsubscribe = subscribeFn(this.#indexUpdate);\n                // Ensure that unsubscribe is a function.\n                if (typeof unsubscribe !== 'function') {\n                    throw new TypeError('AdapterFilters error: Filter has subscribe function, but no unsubscribe function is returned.');\n                }\n                // Ensure that the same filter is not subscribed to multiple times.\n                if (this.#mapUnsubscribe.has(data.filter)) {\n                    throw new Error('AdapterFilters error: Filter added already has an unsubscribe function registered.');\n                }\n                this.#mapUnsubscribe.set(data.filter, unsubscribe);\n                subscribeCount++;\n            }\n        }\n        // Filters with subscriber functionality are assumed to immediately invoke the `subscribe` callback. If the\n        // subscriber count is less than the amount of filters added then automatically trigger an index update manually.\n        if (subscribeCount < filters.length) {\n            this.#indexUpdate();\n        }\n    }\n    /**\n     * Clears and removes all filters.\n     */\n    clear() {\n        this.#filtersData.filters.length = 0;\n        // Unsubscribe from all filters with subscription support.\n        for (const unsubscribe of this.#mapUnsubscribe.values()) {\n            unsubscribe();\n        }\n        this.#mapUnsubscribe.clear();\n        this.#indexUpdate();\n    }\n    /**\n     * @param filters -\n     */\n    remove(...filters) {\n        const length = this.#filtersData.filters.length;\n        if (length === 0) {\n            return;\n        }\n        for (const data of filters) {\n            // Handle the case that the filter may either be a function or a filter entry / object.\n            const actualFilter = typeof data === 'function' ? data : data !== null && typeof data === 'object' ?\n                data.filter : void 0;\n            if (!actualFilter) {\n                continue;\n            }\n            for (let cntr = this.#filtersData.filters.length; --cntr >= 0;) {\n                if (this.#filtersData.filters[cntr].filter === actualFilter) {\n                    this.#filtersData.filters.splice(cntr, 1);\n                    // Invoke any unsubscribe function for given filter then remove from tracking.\n                    let unsubscribe = void 0;\n                    if (typeof (unsubscribe = this.#mapUnsubscribe.get(actualFilter)) === 'function') {\n                        unsubscribe();\n                        this.#mapUnsubscribe.delete(actualFilter);\n                    }\n                }\n            }\n        }\n        // Update the index a filter was removed.\n        if (length !== this.#filtersData.filters.length) {\n            this.#indexUpdate();\n        }\n    }\n    /**\n     * Remove filters by the provided callback. The callback takes 3 parameters: `id`, `filter`, and `weight`.\n     * Any truthy value returned will remove that filter.\n     *\n     * @param callback - Callback function to evaluate each filter entry.\n     */\n    removeBy(callback) {\n        const length = this.#filtersData.filters.length;\n        if (length === 0) {\n            return;\n        }\n        if (typeof callback !== 'function') {\n            throw new TypeError(`AdapterFilters error: 'callback' is not a function.`);\n        }\n        this.#filtersData.filters = this.#filtersData.filters.filter((data) => {\n            const remove = callback.call(callback, { ...data });\n            if (remove) {\n                let unsubscribe;\n                if (typeof (unsubscribe = this.#mapUnsubscribe.get(data.filter)) === 'function') {\n                    unsubscribe();\n                    this.#mapUnsubscribe.delete(data.filter);\n                }\n            }\n            // Reverse remove boolean to properly filter / remove this filter.\n            return !remove;\n        });\n        if (length !== this.#filtersData.filters.length) {\n            this.#indexUpdate();\n        }\n    }\n    /**\n     * @param ids - Removes filters by ID.\n     */\n    removeById(...ids) {\n        const length = this.#filtersData.filters.length;\n        if (length === 0) {\n            return;\n        }\n        this.#filtersData.filters = this.#filtersData.filters.filter((data) => {\n            let remove = 0;\n            for (const id of ids) {\n                remove |= (data.id === id ? 1 : 0);\n            }\n            // If not keeping invoke any unsubscribe function for given filter then remove from tracking.\n            if (!!remove) {\n                let unsubscribe;\n                if (typeof (unsubscribe = this.#mapUnsubscribe.get(data.filter)) === 'function') {\n                    unsubscribe();\n                    this.#mapUnsubscribe.delete(data.filter);\n                }\n            }\n            return !remove; // Swap here to actually remove the item via array filter method.\n        });\n        if (length !== this.#filtersData.filters.length) {\n            this.#indexUpdate();\n        }\n    }\n}\n\n/**\n * Provides construction and management of indexed data when there are parent indexes or filter / sort functions\n * applied.\n */\nclass AdapterIndexer {\n    derivedAdapter;\n    filtersData;\n    hostData;\n    hostUpdate;\n    indexData;\n    sortData;\n    sortFn;\n    destroyed = false;\n    /**\n     * @param hostData - Hosted data structure.\n     *\n     * @param hostUpdate - Host update function invoked on index updates.\n     *\n     * @param [parentIndexer] - Any associated parent index API.\n     *\n     * @returns Indexer adapter instance.\n     */\n    constructor(hostData, hostUpdate, parentIndexer) {\n        this.hostData = hostData;\n        this.hostUpdate = hostUpdate;\n        this.indexData = { index: null, hash: null, reversed: false, parent: parentIndexer };\n    }\n    /**\n     * @returns Returns whether the index is active.\n     */\n    get active() {\n        return this.filtersData.filters.length > 0 || this.sortData.compareFn !== null ||\n            this.indexData.parent?.active === true;\n    }\n    /**\n     * @returns Returns length of reduced index.\n     */\n    get length() {\n        return this.indexData.index ? this.indexData.index.length : 0;\n    }\n    /* c8 ignore start */\n    /**\n     * @returns Returns reversed state.\n     */\n    get reversed() { return this.indexData.reversed; }\n    /* c8 ignore end */\n    /**\n     * @param reversed - New reversed state.\n     */\n    set reversed(reversed) { this.indexData.reversed = reversed; }\n    // -------------------------------------------------------------------------------------------------------------------\n    /**\n     * Calculates a new hash value for the new index array if any. If the new index array is null then the hash value\n     * is set to null. Set calculated new hash value to the index adapter hash value.\n     *\n     * After hash generation compare old and new hash values and perform an update if they are different. If they are\n     * equal check for array equality between the old and new index array and perform an update if they are not equal.\n     *\n     * @param oldIndex - Old index array.\n     *\n     * @param oldHash - Old index hash value.\n     *\n     * @param [force=false] - When true forces an update to subscribers.\n     */\n    calcHashUpdate(oldIndex, oldHash, force = false) {\n        // Use force if a boolean otherwise default to false.\n        const actualForce = typeof force === 'boolean' ? force : /* c8 ignore next */ false;\n        let newHash = null;\n        const newIndex = this.indexData.index;\n        if (newIndex) {\n            for (let cntr = newIndex.length; --cntr >= 0;) {\n                newHash ^= DynReducerUtils.hashUnknown(newIndex[cntr]) + 0x9e3779b9 + (newHash << 6) + (newHash >> 2);\n            }\n        }\n        this.indexData.hash = newHash;\n        if (actualForce || (oldHash === newHash ? !DynReducerUtils.arrayEquals(oldIndex, newIndex) : true)) {\n            this.hostUpdate();\n        }\n    }\n    /**\n     * Destroys all resources.\n     */\n    destroy() {\n        if (this.destroyed) {\n            return;\n        }\n        this.indexData.index = null;\n        this.indexData.hash = null;\n        this.indexData.reversed = null;\n        this.indexData.parent = null;\n        this.destroyed = true;\n    }\n    /**\n     * Store associated filter and sort data that are constructed after the indexer.\n     *\n     * @param filtersData - Associated AdapterFilters instance.\n     *\n     * @param sortData - Associated AdapterSort instance.\n     *\n     * @param derivedAdapter - Associated AdapterDerived instance.\n     */\n    initAdapters(filtersData, sortData, derivedAdapter) {\n        this.filtersData = filtersData;\n        this.sortData = sortData;\n        this.derivedAdapter = derivedAdapter;\n        this.sortFn = this.createSortFn();\n    }\n}\n\n/**\n * Provides the storage and sequencing of a managed sort function. The sort function set may be a bespoke function or a\n * {@link DataSort} object containing an `compare`, and `subscribe` attributes; `compare` is the only required\n * attribute.\n *\n * Note: You can set a compare function that also has a subscribe function attached as the `subscribe` attribute.\n * If a subscribe function is provided the sort function can notify any updates that may change sort order and this\n * triggers an index update.\n *\n * This class forms the public API which is accessible from the `.sort` getter in the main reducer implementation.\n * ```\n * const dynArray = new DynArrayReducer([...]);\n * dynArray.sort.clear();\n * dynArray.sort.set(...);\n * ```\n */\nclass AdapterSort {\n    #sortData;\n    #indexUpdate;\n    #unsubscribe;\n    /**\n     * @param indexUpdate - Function to update indexer.\n     *\n     * @param sortData - Storage for compare function.\n     */\n    constructor(indexUpdate, sortData) {\n        this.#indexUpdate = indexUpdate;\n        this.#sortData = sortData;\n        Object.freeze(this);\n    }\n    /**\n     * Clears & removes any assigned sort function and triggers an index update.\n     */\n    clear() {\n        const oldCompareFn = this.#sortData.compareFn;\n        this.#sortData.compareFn = null;\n        if (typeof this.#unsubscribe === 'function') {\n            this.#unsubscribe();\n            this.#unsubscribe = void 0;\n        }\n        // Only update index if an old compare function is set.\n        if (typeof oldCompareFn === 'function') {\n            this.#indexUpdate();\n        }\n    }\n    /**\n     * @param data - A callback function that compares two values. Return > 0 to sort b before a;\n     * < 0 to sort a before b; or 0 to keep original order of a & b.\n     *\n     * Note: You can set a compare function that also has a subscribe function attached as the `subscribe` attribute.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#parameters\n     */\n    set(data) {\n        if (typeof this.#unsubscribe === 'function') {\n            this.#unsubscribe();\n            this.#unsubscribe = void 0;\n        }\n        let compareFn = void 0;\n        let subscribeFn = void 0;\n        switch (typeof data) {\n            case 'function':\n                compareFn = data;\n                subscribeFn = data.subscribe;\n                break;\n            case 'object':\n                // Early out if data is null / noop.\n                if (data === null) {\n                    break;\n                }\n                if (typeof data.compare !== 'function') {\n                    throw new TypeError(`AdapterSort error: 'compare' attribute is not a function.`);\n                }\n                compareFn = data.compare;\n                subscribeFn = data.compare.subscribe ?? data.subscribe;\n                break;\n        }\n        if (typeof compareFn === 'function') {\n            this.#sortData.compareFn = compareFn;\n        }\n        else {\n            const oldCompareFn = this.#sortData.compareFn;\n            this.#sortData.compareFn = null;\n            // Update index if the old compare function exists.\n            if (typeof oldCompareFn === 'function') {\n                this.#indexUpdate();\n            }\n            return;\n        }\n        if (typeof subscribeFn === 'function') {\n            this.#unsubscribe = subscribeFn(this.#indexUpdate);\n            // Ensure that unsubscribe is a function.\n            if (typeof this.#unsubscribe !== 'function') {\n                throw new Error(`AdapterSort error: sort has 'subscribe' function, but no 'unsubscribe' function is returned.`);\n            }\n        }\n        else {\n            // A sort function with subscriber functionality are assumed to immediately invoke the `subscribe` callback.\n            // Only manually update the index if there is no subscriber functionality.\n            this.#indexUpdate();\n        }\n    }\n}\n\n/**\n * Provides the public API for accessing the index API.\n *\n * This class forms the public API which is accessible from the `.index` getter in the main reducer implementation.\n * ```\n * const dynArray = new DynArrayReducer([...]);\n * dynArray.index.active;\n * dynArray.index.hash;\n * dynArray.index.length;\n * dynArray.index.update(...);\n * ```\n */\nclass IndexerAPI {\n    #indexData;\n    /**\n     * Provides a getter to determine if the index is active.\n     */\n    active;\n    /**\n     * Provides length of reduced / indexed elements.\n     */\n    length;\n    /**\n     * Manually invoke an update of the index.\n     *\n     * @param force - Force update to any subscribers.\n     */\n    update;\n    constructor(adapterIndexer) {\n        this.#indexData = adapterIndexer.indexData;\n        this.update = adapterIndexer.update.bind(adapterIndexer);\n        // Defines getters on the public API to get the index hash, active state, and index length.\n        Object.defineProperties(this, {\n            active: { get: () => adapterIndexer.active },\n            length: { get: () => adapterIndexer.length }\n        });\n        Object.freeze(this);\n    }\n    /**\n     * - Current hash value of the index.\n     */\n    get hash() {\n        return this.#indexData.hash;\n    }\n    /**\n     * Provides an iterator over the index array.\n     *\n     * @returns Iterator / generator\n     * @yields {K}\n     */\n    *[Symbol.iterator]() {\n        const indexData = this.#indexData;\n        if (!indexData.index) {\n            return;\n        }\n        const reversed = indexData.reversed;\n        const length = indexData.index.length;\n        if (reversed) {\n            for (let cntr = length; --cntr >= 0;) {\n                yield indexData.index[cntr];\n            }\n        }\n        else {\n            for (let cntr = 0; cntr < length; cntr++) {\n                yield indexData.index[cntr];\n            }\n        }\n    }\n}\n\n/**\n * Provides the public API for derived reducers. There are several ways to create a derived reducer from utilizing the\n * default implementation or passing in a constructor function / class for a custom derived reducer.\n *\n * This class forms the public API which is accessible from the `.derived` getter in the main reducer implementation.\n * ```\n * const dynArray = new DynArrayReducer([...]);\n * dynArray.derived.clear();\n * dynArray.derived.create(...);\n * dynArray.derived.delete(...);\n * dynArray.derived.destroy();\n * dynArray.derived.get(...);\n * ```\n */\nclass DerivedAPI {\n    /**\n     * Removes all derived reducers and associated subscriptions.\n     */\n    clear;\n    /**\n     * @param options - Options for creating a reducer.\n     *\n     * @returns Newly created derived reducer.\n     */\n    create;\n    /**\n     * Deletes and destroys a derived reducer.\n     *\n     * @param name - Name of the derived reducer\n     */\n    delete;\n    /**\n     * Removes all derived reducers, associated subscriptions, and cleans up all resources.\n     */\n    destroy;\n    /**\n     * Returns an existing derived reducer.\n     *\n     * @param name - Name of derived reducer.\n     */\n    get;\n    constructor(adapterDerived) {\n        this.clear = adapterDerived.clear.bind(adapterDerived);\n        this.create = adapterDerived.create.bind(adapterDerived);\n        this.delete = adapterDerived.delete.bind(adapterDerived);\n        this.destroy = adapterDerived.destroy.bind(adapterDerived);\n        this.get = adapterDerived.get.bind(adapterDerived);\n        Object.freeze(this);\n    }\n}\n\n/**\n */\nclass Indexer$1 extends AdapterIndexer {\n    /**\n     * @inheritDoc\n     */\n    createSortFn() {\n        return (a, b) => this.sortData.compareFn(this.hostData[0][a], this.hostData[0][b]);\n    }\n    /**\n     * Provides the custom filter / reduce step that is ~25-40% faster than implementing with `Array.reduce`.\n     *\n     * Note: Other loop unrolling techniques like Duff's Device gave a slight faster lower bound on large data sets,\n     * but the maintenance factor is not worth the extra complication.\n     *\n     * @returns New filtered index array.\n     */\n    reduceImpl() {\n        const data = [];\n        const array = this.hostData[0];\n        if (!array) {\n            return data;\n        }\n        const filters = this.filtersData.filters;\n        let include = true;\n        const parentIndex = this.indexData.parent;\n        // Source index data is coming from an active parent index.\n        if (DynReducerUtils.isIterable(parentIndex) && parentIndex.active) {\n            for (const adjustedIndex of parentIndex) {\n                const value = array[adjustedIndex];\n                include = true;\n                for (let filCntr = 0, filLength = filters.length; filCntr < filLength; filCntr++) {\n                    if (!filters[filCntr].filter(value)) {\n                        include = false;\n                        break;\n                    }\n                }\n                if (include) {\n                    data.push(adjustedIndex);\n                }\n            }\n        }\n        else {\n            for (let cntr = 0, length = array.length; cntr < length; cntr++) {\n                include = true;\n                for (let filCntr = 0, filLength = filters.length; filCntr < filLength; filCntr++) {\n                    if (!filters[filCntr].filter(array[cntr])) {\n                        include = false;\n                        break;\n                    }\n                }\n                if (include) {\n                    data.push(cntr);\n                }\n            }\n        }\n        return data;\n    }\n    /**\n     * Update the reducer indexes. If there are changes subscribers are notified. If data order is changed externally\n     * pass in true to force an update to subscribers.\n     *\n     * @param [force=false] - When true forces an update to subscribers.\n     */\n    update(force = false) {\n        if (this.destroyed) {\n            return;\n        }\n        const oldIndex = this.indexData.index;\n        const oldHash = this.indexData.hash;\n        const array = this.hostData[0];\n        const parentIndex = this.indexData.parent;\n        // Clear index if there are no filters and no sort function or the index length doesn't match the item length.\n        if ((this.filtersData.filters.length === 0 && !this.sortData.compareFn) ||\n            (this.indexData.index && array?.length !== this.indexData.index.length)) {\n            this.indexData.index = null;\n        }\n        // If there are filters build new index.\n        if (this.filtersData.filters.length > 0) {\n            this.indexData.index = this.reduceImpl();\n        }\n        // If the index isn't built yet and there is an active parent index then create it from the parent.\n        if (!this.indexData.index && parentIndex?.active) {\n            this.indexData.index = [...parentIndex];\n        }\n        if (this.sortData.compareFn && Array.isArray(array)) {\n            // If there is no index then create one with keys matching host item length.\n            if (!this.indexData.index) {\n                this.indexData.index = [...Array(array.length).keys()];\n            }\n            this.indexData.index.sort(this.sortFn);\n        }\n        this.calcHashUpdate(oldIndex, oldHash, force);\n        // Update all derived reducers.\n        this.derivedAdapter?.update(force);\n    }\n}\n\n/**\n * Provides the base implementation derived reducer for arrays / DynArrayReducer.\n */\nclass DerivedArrayReducer {\n    #array;\n    #derived;\n    #derivedPublicAPI;\n    #filters;\n    #filtersData = { filters: [] };\n    #index;\n    #indexPublicAPI;\n    #reversed = false;\n    #sort;\n    #sortData = { compareFn: null };\n    #subscriptions = [];\n    #destroyed = false;\n    /**\n     * @param array - Data host array.\n     *\n     * @param parentIndex - Parent indexer.\n     *\n     * @param options - Any filters and sort functions to apply.\n     */\n    constructor(array, parentIndex, options) {\n        this.#array = array;\n        this.#index = new Indexer$1(this.#array, this.#updateSubscribers.bind(this), parentIndex);\n        this.#indexPublicAPI = new IndexerAPI(this.#index);\n        this.#filters = new AdapterFilters(this.#indexPublicAPI.update, this.#filtersData);\n        this.#sort = new AdapterSort(this.#indexPublicAPI.update, this.#sortData);\n        this.#derived = new AdapterDerived(this.#array, this.#indexPublicAPI, DerivedArrayReducer);\n        this.#derivedPublicAPI = new DerivedAPI(this.#derived);\n        this.#index.initAdapters(this.#filtersData, this.#sortData, this.#derived);\n        let filters = void 0;\n        let sort = void 0;\n        if (options !== void 0 && ('filters' in options || 'sort' in options)) {\n            if (options.filters !== void 0) {\n                if (DynReducerUtils.isIterable(options.filters)) {\n                    filters = options.filters;\n                }\n                else {\n                    throw new TypeError(`DerivedArrayReducer error (DataDerivedOptions): 'filters' attribute is not iterable.`);\n                }\n            }\n            if (options.sort !== void 0) {\n                if (typeof options.sort === 'function') {\n                    sort = options.sort;\n                }\n                else if (typeof options.sort === 'object' && options.sort !== null) {\n                    sort = options.sort;\n                }\n                else {\n                    throw new TypeError(`DerivedArrayReducer error (DataDerivedOptions): 'sort' attribute is not a function or object.`);\n                }\n            }\n        }\n        // Add any filters and sort function defined by DataDynArray.\n        if (filters) {\n            this.filters.add(...filters);\n        }\n        if (sort) {\n            this.sort.set(sort);\n        }\n        // Invoke an custom initialization for child classes.\n        this.initialize();\n    }\n    /**\n     * Returns the internal data of this instance. Be careful!\n     *\n     * Note: if an array is set as initial data then that array is used as the internal data. If any changes are\n     * performed to the data externally do invoke {@link IndexerAPI.update} with `true` to recalculate the index and\n     * notify all subscribers.\n     *\n     * @returns The internal data.\n     */\n    get data() { return this.#array[0]; }\n    /**\n     * @returns Derived public API.\n     */\n    get derived() { return this.#derivedPublicAPI; }\n    /**\n     * @returns The filters adapter.\n     */\n    get filters() { return this.#filters; }\n    /**\n     * Returns the Indexer public API.\n     *\n     * @returns Indexer API - is also iterable.\n     */\n    get index() { return this.#indexPublicAPI; }\n    /**\n     * Returns whether this derived reducer is destroyed.\n     */\n    get destroyed() { return this.#destroyed; }\n    /**\n     * @returns Main data / items length or indexed length.\n     */\n    get length() {\n        const array = this.#array[0];\n        return this.#index.active ? this.index.length :\n            array ? array.length : 0;\n    }\n    /**\n     * @returns Gets current reversed state.\n     */\n    get reversed() { return this.#reversed; }\n    /**\n     * @returns The sort adapter.\n     */\n    get sort() { return this.#sort; }\n    /**\n     * Sets reversed state and notifies subscribers.\n     *\n     * @param reversed - New reversed state.\n     */\n    set reversed(reversed) {\n        if (typeof reversed !== 'boolean') {\n            throw new TypeError(`DerivedArrayReducer.reversed error: 'reversed' is not a boolean.`);\n        }\n        this.#reversed = reversed;\n        this.#index.reversed = reversed;\n        // Recalculate index and force an update to any subscribers.\n        this.index.update(true);\n    }\n    /**\n     * Removes all derived reducers, subscriptions, and cleans up all resources.\n     */\n    destroy() {\n        this.#destroyed = true;\n        // Remove any external data reference and perform a final update.\n        this.#array = [null];\n        this.#index.update(true);\n        // Remove all subscriptions.\n        this.#subscriptions.length = 0;\n        this.#derived.destroy();\n        this.#index.destroy();\n        this.#filters.clear();\n        this.#sort.clear();\n    }\n    /**\n     * Provides a callback for custom derived reducers to initialize any data / custom configuration. This allows\n     * child classes to avoid implementing the constructor.\n     *\n     * @protected\n     */\n    initialize() { }\n    /**\n     * Provides an iterator for data stored in DerivedArrayReducer.\n     *\n     * @returns Generator / iterator of all data.\n     */\n    *[Symbol.iterator]() {\n        const array = this.#array[0];\n        if (this.#destroyed || array === null || array?.length === 0) {\n            return;\n        }\n        if (this.#index.active) {\n            for (const entry of this.index) {\n                yield array[entry];\n            }\n        }\n        else {\n            if (this.reversed) {\n                for (let cntr = array.length; --cntr >= 0;) {\n                    yield array[cntr];\n                }\n            }\n            else {\n                for (let cntr = 0; cntr < array.length; cntr++) {\n                    yield array[cntr];\n                }\n            }\n        }\n    }\n    // -------------------------------------------------------------------------------------------------------------------\n    /**\n     * Subscribe to this DerivedArrayReducer.\n     *\n     * @param handler - Callback function that is invoked on update / changes. Receives `this` reference.\n     *\n     * @returns Unsubscribe function.\n     */\n    subscribe(handler) {\n        this.#subscriptions.push(handler); // add handler to the array of subscribers\n        handler(this); // call handler with current value\n        // Return unsubscribe function.\n        return () => {\n            const index = this.#subscriptions.findIndex((sub) => sub === handler);\n            if (index >= 0) {\n                this.#subscriptions.splice(index, 1);\n            }\n        };\n    }\n    /**\n     * Updates subscribers on changes.\n     */\n    #updateSubscribers() {\n        for (let cntr = 0; cntr < this.#subscriptions.length; cntr++) {\n            this.#subscriptions[cntr](this);\n        }\n    }\n}\n\n/**\n * Provides a managed array with non-destructive reducing / filtering / sorting capabilities with subscription /\n * Svelte store support.\n */\nclass DynArrayReducer {\n    #array = [null];\n    #derived;\n    #derivedPublicAPI;\n    #filters;\n    #filtersData = { filters: [] };\n    #index;\n    #indexPublicAPI;\n    #reversed = false;\n    #sort;\n    #sortData = { compareFn: null };\n    #subscriptions = [];\n    #destroyed = false;\n    /**\n     * Initializes DynArrayReducer. Any iterable is supported for initial data. Take note that if `data` is an array it\n     * will be used as the host array and not copied. All non-array iterables otherwise create a new array / copy.\n     *\n     * @param [data] - Data iterable to store if array or copy otherwise.\n     */\n    constructor(data) {\n        let dataIterable = void 0;\n        let filters = void 0;\n        let sort = void 0;\n        if (data === null) {\n            throw new TypeError(`DynArrayReducer error: 'data' is not iterable.`);\n        }\n        if (data !== void 0 && typeof data !== 'object' && !DynReducerUtils.isIterable(data)) {\n            throw new TypeError(`DynArrayReducer error: 'data' is not iterable.`);\n        }\n        if (data !== void 0 && Symbol.iterator in data) {\n            dataIterable = data;\n        }\n        else if (data !== void 0 && ('data' in data || 'filters' in data || 'sort' in data)) {\n            if (data.data !== void 0 && !DynReducerUtils.isIterable(data.data)) {\n                throw new TypeError(`DynArrayReducer error (DataDynArray): 'data' attribute is not iterable.`);\n            }\n            dataIterable = data.data;\n            if (data.filters !== void 0) {\n                if (DynReducerUtils.isIterable(data.filters)) {\n                    filters = data.filters;\n                }\n                else {\n                    throw new TypeError(`DynArrayReducer error (DataDynArray): 'filters' attribute is not iterable.`);\n                }\n            }\n            if (data.sort !== void 0) {\n                if (typeof data.sort === 'function') {\n                    sort = data.sort;\n                }\n                else if (typeof data.sort === 'object' && data.sort !== null) {\n                    sort = data.sort;\n                }\n                else {\n                    throw new TypeError(`DynArrayReducer error (DataDynArray): 'sort' attribute is not a function or object.`);\n                }\n            }\n        }\n        // In the case of the main data being an array directly use the array otherwise create a copy.\n        if (dataIterable) {\n            this.#array[0] = Array.isArray(dataIterable) ? dataIterable : [...dataIterable];\n        }\n        this.#index = new Indexer$1(this.#array, this.#updateSubscribers.bind(this));\n        this.#indexPublicAPI = new IndexerAPI(this.#index);\n        this.#filters = new AdapterFilters(this.#indexPublicAPI.update, this.#filtersData);\n        this.#sort = new AdapterSort(this.#indexPublicAPI.update, this.#sortData);\n        this.#derived = new AdapterDerived(this.#array, this.#indexPublicAPI, DerivedArrayReducer);\n        this.#derivedPublicAPI = new DerivedAPI(this.#derived);\n        this.#index.initAdapters(this.#filtersData, this.#sortData, this.#derived);\n        // Add any filters and sort function defined by DataDynArray.\n        if (filters) {\n            this.filters.add(...filters);\n        }\n        if (sort) {\n            this.sort.set(sort);\n        }\n        // Invoke an custom initialization for child classes.\n        this.initialize();\n    }\n    /**\n     * Returns the internal data of this instance. Be careful!\n     *\n     * Note: if an array is set as initial data then that array is used as the internal data. If any changes are\n     * performed to the data externally do invoke {@link AdapterIndexer.index.update} with `true` to recalculate the\n     * index and notify all subscribers.\n     *\n     * @returns The internal data.\n     */\n    get data() { return this.#array[0]; }\n    /**\n     * @returns Derived public API.\n     */\n    get derived() { return this.#derivedPublicAPI; }\n    /**\n     * @returns The filters adapter.\n     */\n    get filters() { return this.#filters; }\n    /**\n     * @returns Returns the Indexer public API.\n     */\n    get index() { return this.#indexPublicAPI; }\n    /**\n     * Returns whether this instance is destroyed.\n     */\n    get destroyed() { return this.#destroyed; }\n    /**\n     * Gets the main data / items length.\n     *\n     * @returns {number} Main data / items length.\n     */\n    get length() {\n        const array = this.#array[0];\n        return this.#index.active ? this.#indexPublicAPI.length :\n            array ? array.length : 0;\n    }\n    /**\n     * Gets current reversed state.\n     *\n     * @returns {boolean} Reversed state.\n     */\n    get reversed() { return this.#reversed; }\n    /**\n     * @returns The sort adapter.\n     */\n    get sort() { return this.#sort; }\n    /**\n     * Sets reversed state and notifies subscribers.\n     *\n     * @param reversed - New reversed state.\n     */\n    set reversed(reversed) {\n        if (typeof reversed !== 'boolean') {\n            throw new TypeError(`DynArrayReducer.reversed error: 'reversed' is not a boolean.`);\n        }\n        this.#reversed = reversed;\n        this.#index.reversed = reversed;\n        // Recalculate index and force an update to any subscribers.\n        this.index.update(true);\n    }\n    /**\n     * Removes all derived reducers, subscriptions, and cleans up all resources.\n     */\n    destroy() {\n        if (this.#destroyed) {\n            return;\n        }\n        this.#destroyed = true;\n        this.#derived.destroy();\n        // Set the backing data to null and provide a final update.\n        this.#array = [null];\n        this.index.update(true);\n        // Remove all subscriptions.\n        this.#subscriptions.length = 0;\n        this.#index.destroy();\n        this.#filters.clear();\n        this.#sort.clear();\n    }\n    /**\n     * Provides a callback for custom reducers to initialize any data / custom configuration. This allows\n     * child classes to avoid implementing the constructor.\n     *\n     * @protected\n     */\n    initialize() { }\n    /**\n     * Removes internal data and pushes new data. This does not destroy any initial array set to internal data unless\n     * `replace` is set to true.\n     *\n     * @param data - New data to set to internal data.\n     *\n     * @param replace=false - New data to set to internal data.\n     */\n    setData(data, replace = false) {\n        if (data !== null && !DynReducerUtils.isIterable(data)) {\n            throw new TypeError(`DynArrayReducer.setData error: 'data' is not iterable.`);\n        }\n        if (typeof replace !== 'boolean') {\n            throw new TypeError(`DynArrayReducer.setData error: 'replace' is not a boolean.`);\n        }\n        const array = this.#array[0];\n        // If the array isn't defined or 'replace' is true then replace internal data with new array or create an array\n        // from an iterable.\n        if (!Array.isArray(array) || replace) {\n            if (data) {\n                this.#array[0] = Array.isArray(data) ? data : [...data];\n            }\n        }\n        else {\n            if (data) {\n                // Remove all entries in internal data. This will not replace any initially set array.\n                array.length = 0;\n                // Add all new data.\n                array.push(...data);\n            }\n            else {\n                this.#array[0] = null;\n            }\n        }\n        // Recalculate index and force an update to any subscribers.\n        this.index.update(true);\n    }\n    /**\n     * Add a subscriber to this DynArrayReducer instance.\n     *\n     * @param handler - Callback function that is invoked on update / changes. Receives `this` reference.\n     *\n     * @returns Unsubscribe function.\n     */\n    subscribe(handler) {\n        this.#subscriptions.push(handler); // add handler to the array of subscribers\n        handler(this); // call handler with current value\n        // Return unsubscribe function.\n        return () => {\n            const index = this.#subscriptions.findIndex((sub) => sub === handler);\n            if (index >= 0) {\n                this.#subscriptions.splice(index, 1);\n            }\n        };\n    }\n    /**\n     * Updates subscribers on changes.\n     */\n    #updateSubscribers() {\n        for (let cntr = 0; cntr < this.#subscriptions.length; cntr++) {\n            this.#subscriptions[cntr](this);\n        }\n    }\n    /**\n     * Provides an iterator for data stored in DynArrayReducer.\n     *\n     * @returns Generator / iterator of all data.\n     * @yields {T}\n     */\n    *[Symbol.iterator]() {\n        const array = this.#array[0];\n        if (this.#destroyed || array === null || array?.length === 0) {\n            return;\n        }\n        if (this.#index.active) {\n            for (const entry of this.index) {\n                yield array[entry];\n            }\n        }\n        else {\n            if (this.reversed) {\n                for (let cntr = array.length; --cntr >= 0;) {\n                    yield array[cntr];\n                }\n            }\n            else {\n                for (let cntr = 0; cntr < array.length; cntr++) {\n                    yield array[cntr];\n                }\n            }\n        }\n    }\n}\n\n/**\n */\nclass Indexer extends AdapterIndexer {\n    /**\n     * @inheritDoc\n     */\n    createSortFn() {\n        return (a, b) => this.sortData.compareFn(this.hostData[0].get(a), this.hostData[0].get(b));\n    }\n    /**\n     * Provides the custom filter / reduce step that is ~25-40% faster than implementing with `Array.reduce`.\n     *\n     * Note: Other loop unrolling techniques like Duff's Device gave a slight faster lower bound on large data sets,\n     * but the maintenance factor is not worth the extra complication.\n     *\n     * @returns New filtered index array.\n     */\n    reduceImpl() {\n        const data = [];\n        const map = this.hostData[0];\n        if (!map) {\n            return data;\n        }\n        const filters = this.filtersData.filters;\n        let include = true;\n        const parentIndex = this.indexData.parent;\n        // Source index data is coming from an active parent index.\n        if (DynReducerUtils.isIterable(parentIndex) && parentIndex.active) {\n            for (const key of parentIndex) {\n                const value = map.get(key);\n                include = true;\n                for (let filCntr = 0, filLength = filters.length; filCntr < filLength; filCntr++) {\n                    if (!filters[filCntr].filter(value)) {\n                        include = false;\n                        break;\n                    }\n                }\n                if (include) {\n                    data.push(key);\n                }\n            }\n        }\n        else {\n            for (const key of map.keys()) {\n                include = true;\n                const value = map.get(key);\n                for (let filCntr = 0, filLength = filters.length; filCntr < filLength; filCntr++) {\n                    if (!filters[filCntr].filter(value)) {\n                        include = false;\n                        break;\n                    }\n                }\n                if (include) {\n                    data.push(key);\n                }\n            }\n        }\n        return data;\n    }\n    /**\n     * Update the reducer indexes. If there are changes subscribers are notified. If data order is changed externally\n     * pass in true to force an update to subscribers.\n     *\n     * @param [force=false] - When true forces an update to subscribers.\n     */\n    update(force = false) {\n        if (this.destroyed) {\n            return;\n        }\n        const oldIndex = this.indexData.index;\n        const oldHash = this.indexData.hash;\n        const map = this.hostData[0];\n        const parentIndex = this.indexData.parent;\n        // Clear index if there are no filters and no sort function or the index length doesn't match the item length.\n        if ((this.filtersData.filters.length === 0 && !this.sortData.compareFn) ||\n            (this.indexData.index && map?.size !== this.indexData.index.length)) {\n            this.indexData.index = null;\n        }\n        // If there are filters build new index.\n        if (this.filtersData.filters.length > 0) {\n            this.indexData.index = this.reduceImpl();\n        }\n        // If the index isn't built yet and there is an active parent index then create it from the parent.\n        if (!this.indexData.index && parentIndex?.active) {\n            this.indexData.index = [...parentIndex];\n        }\n        if (this.sortData.compareFn && map instanceof Map) {\n            // If there is no index then create one with keys matching host item length.\n            if (!this.indexData.index) {\n                this.indexData.index = this.indexData.index = [...map.keys()];\n            }\n            this.indexData.index.sort(this.sortFn);\n        }\n        this.calcHashUpdate(oldIndex, oldHash, force);\n        // Update all derived reducers.\n        this.derivedAdapter?.update(force);\n    }\n}\n\n/**\n * Provides the base implementation derived reducer for arrays / DynArrayReducer.\n */\nclass DerivedMapReducer {\n    #map;\n    #derived;\n    #derivedPublicAPI;\n    #filters;\n    #filtersData = { filters: [] };\n    #index;\n    #indexPublicAPI;\n    #reversed = false;\n    #sort;\n    #sortData = { compareFn: null };\n    #subscriptions = [];\n    #destroyed = false;\n    /**\n     * @param map - Data host Map.\n     *\n     * @param parentIndex - Parent indexer.\n     *\n     * @param options - Any filters and sort functions to apply.\n     */\n    constructor(map, parentIndex, options) {\n        this.#map = map;\n        this.#index = new Indexer(this.#map, this.#updateSubscribers.bind(this), parentIndex);\n        this.#indexPublicAPI = new IndexerAPI(this.#index);\n        this.#filters = new AdapterFilters(this.#indexPublicAPI.update, this.#filtersData);\n        this.#sort = new AdapterSort(this.#indexPublicAPI.update, this.#sortData);\n        this.#derived = new AdapterDerived(this.#map, this.#indexPublicAPI, DerivedMapReducer);\n        this.#derivedPublicAPI = new DerivedAPI(this.#derived);\n        this.#index.initAdapters(this.#filtersData, this.#sortData, this.#derived);\n        let filters = void 0;\n        let sort = void 0;\n        if (options !== void 0 && ('filters' in options || 'sort' in options)) {\n            if (options.filters !== void 0) {\n                if (DynReducerUtils.isIterable(options.filters)) {\n                    filters = options.filters;\n                }\n                else {\n                    throw new TypeError(`DerivedMapReducer error (DataDerivedOptions): 'filters' attribute is not iterable.`);\n                }\n            }\n            if (options.sort !== void 0) {\n                if (typeof options.sort === 'function') {\n                    sort = options.sort;\n                }\n                else if (typeof options.sort === 'object' && options.sort !== null) {\n                    sort = options.sort;\n                }\n                else {\n                    throw new TypeError(`DerivedMapReducer error (DataDerivedOptions): 'sort' attribute is not a function or object.`);\n                }\n            }\n        }\n        // Add any filters and sort function defined by DataDynArray.\n        if (filters) {\n            this.filters.add(...filters);\n        }\n        if (sort) {\n            this.sort.set(sort);\n        }\n        // Invoke an custom initialization for child classes.\n        this.initialize();\n    }\n    /**\n     * Returns the internal data of this instance. Be careful!\n     *\n     * Note: The returned map is the same map set by the main reducer. If any changes are performed to the data\n     * externally do invoke {@link IndexerAPI.update} with `true` to recalculate the index and notify all subscribers.\n     *\n     * @returns The internal data.\n     */\n    get data() { return this.#map[0]; }\n    /**\n     * @returns Derived public API.\n     */\n    get derived() { return this.#derivedPublicAPI; }\n    /**\n     * @returns The filters adapter.\n     */\n    get filters() { return this.#filters; }\n    /**\n     * Returns the Indexer public API.\n     *\n     * @returns Indexer API - is also iterable.\n     */\n    get index() { return this.#indexPublicAPI; }\n    /**\n     * Returns whether this derived reducer is destroyed.\n     */\n    get destroyed() { return this.#destroyed; }\n    /**\n     * @returns Main data / items length or indexed length.\n     */\n    get length() {\n        const map = this.#map[0];\n        return this.#index.active ? this.index.length :\n            map ? map.size : 0;\n    }\n    /**\n     * @returns Gets current reversed state.\n     */\n    get reversed() { return this.#reversed; }\n    /**\n     * @returns The sort adapter.\n     */\n    get sort() { return this.#sort; }\n    /**\n     * Sets reversed state and notifies subscribers.\n     *\n     * @param reversed - New reversed state.\n     */\n    set reversed(reversed) {\n        if (typeof reversed !== 'boolean') {\n            throw new TypeError(`DerivedMapReducer.reversed error: 'reversed' is not a boolean.`);\n        }\n        this.#reversed = reversed;\n        this.#index.reversed = reversed;\n        // Recalculate index and force an update to any subscribers.\n        this.index.update(true);\n    }\n    /**\n     * Removes all derived reducers, subscriptions, and cleans up all resources.\n     */\n    destroy() {\n        this.#destroyed = true;\n        // Remove any external data reference and perform a final update.\n        this.#map = [null];\n        this.#index.update(true);\n        // Remove all subscriptions.\n        this.#subscriptions.length = 0;\n        this.#derived.destroy();\n        this.#index.destroy();\n        this.#filters.clear();\n        this.#sort.clear();\n    }\n    /**\n     * Provides a callback for custom derived reducers to initialize any data / custom configuration. This allows\n     * child classes to avoid implementing the constructor.\n     *\n     * @protected\n     */\n    initialize() { }\n    /**\n     * Provides an iterator for data stored in DerivedMapReducer.\n     *\n     * @returns Generator / iterator of all data.\n     */\n    *[Symbol.iterator]() {\n        const map = this.#map[0];\n        if (this.#destroyed || map === null || map?.size === 0) {\n            return;\n        }\n        if (this.#index.active) {\n            for (const key of this.index) {\n                yield map.get(key);\n            }\n        }\n        else {\n            if (this.reversed) {\n                // TODO: Not efficient due to creating temporary values array.\n                const values = [...map.values()];\n                for (let cntr = values.length; --cntr >= 0;) {\n                    yield values[cntr];\n                }\n            }\n            else {\n                for (const value of map.values()) {\n                    yield value;\n                }\n            }\n        }\n    }\n    // -------------------------------------------------------------------------------------------------------------------\n    /**\n     * Subscribe to this DerivedMapReducer.\n     *\n     * @param handler - Callback function that is invoked on update / changes. Receives `this` reference.\n     *\n     * @returns Unsubscribe function.\n     */\n    subscribe(handler) {\n        this.#subscriptions.push(handler); // add handler to the array of subscribers\n        handler(this); // call handler with current value\n        // Return unsubscribe function.\n        return () => {\n            const index = this.#subscriptions.findIndex((sub) => sub === handler);\n            if (index >= 0) {\n                this.#subscriptions.splice(index, 1);\n            }\n        };\n    }\n    /**\n     * Updates subscribers on changes.\n     */\n    #updateSubscribers() {\n        for (let cntr = 0; cntr < this.#subscriptions.length; cntr++) {\n            this.#subscriptions[cntr](this);\n        }\n    }\n}\n\n/**\n * Provides a managed Map with non-destructive reducing / filtering / sorting capabilities with subscription /\n * Svelte store support.\n */\nclass DynMapReducer {\n    #map = [null];\n    #derived;\n    #derivedPublicAPI;\n    #filters;\n    #filtersData = { filters: [] };\n    #index;\n    #indexPublicAPI;\n    #reversed = false;\n    #sort;\n    #sortData = { compareFn: null };\n    #subscriptions = [];\n    #destroyed = false;\n    /**\n     * Initializes DynMapReducer. Any iterable is supported for initial data. Take note that if `data` is an array it\n     * will be used as the host array and not copied. All non-array iterables otherwise create a new array / copy.\n     *\n     * @param [data] - Data iterable to store if array or copy otherwise.\n     */\n    constructor(data) {\n        let dataMap = void 0;\n        let filters = void 0;\n        let sort = void 0;\n        if (data === null) {\n            throw new TypeError(`DynMapReducer error: 'data' is not an object or Map.`);\n        }\n        if (data !== void 0 && typeof data !== 'object' && !(data instanceof Map)) {\n            throw new TypeError(`DynMapReducer error: 'data' is not an object or Map.`);\n        }\n        if (data !== void 0 && data instanceof Map) {\n            dataMap = data;\n        }\n        else if (data !== void 0 && ('data' in data || 'filters' in data || 'sort' in data)) {\n            if (data.data !== void 0 && !(data.data instanceof Map)) {\n                throw new TypeError(`DynMapReducer error (DataDynMap): 'data' attribute is not a Map.`);\n            }\n            dataMap = data.data;\n            if (data.filters !== void 0) {\n                if (DynReducerUtils.isIterable(data.filters)) {\n                    filters = data.filters;\n                }\n                else {\n                    throw new TypeError(`DynMapReducer error (DataDynMap): 'filters' attribute is not iterable.`);\n                }\n            }\n            if (data.sort !== void 0) {\n                if (typeof data.sort === 'function') {\n                    sort = data.sort;\n                }\n                else if (typeof data.sort === 'object' && data.sort !== null) {\n                    sort = data.sort;\n                }\n                else {\n                    throw new TypeError(`DynMapReducer error (DataDynMap): 'sort' attribute is not a function or object.`);\n                }\n            }\n        }\n        // In the case of the main data being an array directly use the array otherwise create a copy.\n        if (dataMap) {\n            this.#map[0] = dataMap;\n        }\n        this.#index = new Indexer(this.#map, this.#updateSubscribers.bind(this));\n        this.#indexPublicAPI = new IndexerAPI(this.#index);\n        this.#filters = new AdapterFilters(this.#indexPublicAPI.update, this.#filtersData);\n        this.#sort = new AdapterSort(this.#indexPublicAPI.update, this.#sortData);\n        this.#derived = new AdapterDerived(this.#map, this.#indexPublicAPI, DerivedMapReducer);\n        this.#derivedPublicAPI = new DerivedAPI(this.#derived);\n        this.#index.initAdapters(this.#filtersData, this.#sortData, this.#derived);\n        // Add any filters and sort function defined by DataDynMap.\n        if (filters) {\n            this.filters.add(...filters);\n        }\n        if (sort) {\n            this.sort.set(sort);\n        }\n        // Invoke an custom initialization for child classes.\n        this.initialize();\n    }\n    /**\n     * Returns the internal data of this instance. Be careful!\n     *\n     * Note: When a map is set as data then that map is used as the internal data. If any changes are\n     * performed to the data externally do invoke {@link AdapterIndexer.index.update} with `true` to recalculate the\n     * index and notify all subscribers.\n     *\n     * @returns The internal data.\n     */\n    get data() { return this.#map[0]; }\n    /**\n     * @returns Derived public API.\n     */\n    get derived() { return this.#derivedPublicAPI; }\n    /**\n     * @returns The filters adapter.\n     */\n    get filters() { return this.#filters; }\n    /**\n     * @returns Returns the Indexer public API.\n     */\n    get index() { return this.#indexPublicAPI; }\n    /**\n     * Returns whether this instance is destroyed.\n     */\n    get destroyed() { return this.#destroyed; }\n    /**\n     * Gets the main data / items length.\n     *\n     * @returns {number} Main data / items length.\n     */\n    get length() {\n        const map = this.#map[0];\n        return this.#index.active ? this.#indexPublicAPI.length :\n            map ? map.size : 0;\n    }\n    /**\n     * Gets current reversed state.\n     *\n     * @returns {boolean} Reversed state.\n     */\n    get reversed() { return this.#reversed; }\n    /**\n     * @returns The sort adapter.\n     */\n    get sort() { return this.#sort; }\n    /**\n     * Sets reversed state and notifies subscribers.\n     *\n     * @param reversed - New reversed state.\n     */\n    set reversed(reversed) {\n        if (typeof reversed !== 'boolean') {\n            throw new TypeError(`DynMapReducer.reversed error: 'reversed' is not a boolean.`);\n        }\n        this.#reversed = reversed;\n        this.#index.reversed = reversed;\n        // Recalculate index and force an update to any subscribers.\n        this.index.update(true);\n    }\n    /**\n     * Removes all derived reducers, subscriptions, and cleans up all resources.\n     */\n    destroy() {\n        if (this.#destroyed) {\n            return;\n        }\n        this.#destroyed = true;\n        this.#derived.destroy();\n        // Set the backing data to null and provide a final update.\n        this.#map = [null];\n        this.index.update(true);\n        // Remove all subscriptions.\n        this.#subscriptions.length = 0;\n        this.#index.destroy();\n        this.#filters.clear();\n        this.#sort.clear();\n    }\n    /**\n     * Provides a callback for custom reducers to initialize any data / custom configuration. This allows\n     * child classes to avoid implementing the constructor.\n     *\n     * @protected\n     */\n    initialize() { }\n    /**\n     * Removes internal data and pushes new data. This does not destroy any initial array set to internal data unless\n     * `replace` is set to true.\n     *\n     * @param data - New data to set to internal data.\n     *\n     * @param replace=false - New data to set to internal data.\n     */\n    setData(data, replace = false) {\n        if (data !== null && !(data instanceof Map)) {\n            throw new TypeError(`DynMapReducer.setData error: 'data' is not iterable.`);\n        }\n        if (typeof replace !== 'boolean') {\n            throw new TypeError(`DynMapReducer.setData error: 'replace' is not a boolean.`);\n        }\n        const map = this.#map[0];\n        // If the array isn't defined or 'replace' is true then replace internal data with new array or create an array\n        // from an iterable.\n        if (!(map instanceof Map) || replace) {\n            this.#map[0] = data instanceof Map ? data : null;\n        }\n        else if (data instanceof Map && map instanceof Map) {\n            // Create a set of all current entry IDs.\n            const removeKeySet = new Set(map.keys());\n            for (const key of data.keys()) {\n                map.set(key, data.get(key));\n                if (removeKeySet.has(key)) {\n                    removeKeySet.delete(key);\n                }\n            }\n            // Remove entries that are no longer in data.\n            for (const key of removeKeySet) {\n                map.delete(key);\n            }\n        }\n        else if (data === null) {\n            this.#map[0] = null;\n        }\n        // Recalculate index and force an update to any subscribers.\n        this.index.update(true);\n    }\n    /**\n     * Add a subscriber to this DynMapReducer instance.\n     *\n     * @param handler - Callback function that is invoked on update / changes. Receives `this` reference.\n     *\n     * @returns Unsubscribe function.\n     */\n    subscribe(handler) {\n        this.#subscriptions.push(handler); // add handler to the array of subscribers\n        handler(this); // call handler with current value\n        // Return unsubscribe function.\n        return () => {\n            const index = this.#subscriptions.findIndex((sub) => sub === handler);\n            if (index >= 0) {\n                this.#subscriptions.splice(index, 1);\n            }\n        };\n    }\n    /**\n     * Updates subscribers on changes.\n     */\n    #updateSubscribers() {\n        for (let cntr = 0; cntr < this.#subscriptions.length; cntr++) {\n            this.#subscriptions[cntr](this);\n        }\n    }\n    /**\n     * Provides an iterator for data stored in DynMapReducer.\n     *\n     * @returns Generator / iterator of all data.\n     * @yields {T}\n     */\n    *[Symbol.iterator]() {\n        const map = this.#map[0];\n        if (this.#destroyed || map === null || map?.size === 0) {\n            return;\n        }\n        if (this.#index.active) {\n            for (const key of this.index) {\n                yield map.get(key);\n            }\n        }\n        else {\n            if (this.reversed) {\n                // TODO: Not efficient due to creating temporary values array.\n                const values = [...map.values()];\n                for (let cntr = values.length; --cntr >= 0;) {\n                    yield values[cntr];\n                }\n            }\n            else {\n                for (const value of map.values()) {\n                    yield value;\n                }\n            }\n        }\n    }\n}\n\n/**\n * Provides a readable store to track keys actively pressed. KeyStore is designed to be used with the {@link keyforward}\n * action.\n */\nclass KeyStore\n{\n   #keySet;\n\n   /**\n    * @type {Map<string, number>}\n    */\n   #keyMap = new Map();\n\n   /**\n    * @type {KeyStoreOptions}\n    */\n   #options = { preventDefault: true, useCode: true, stopPropagation: true };\n\n   /**\n    * Stores the subscribers.\n    *\n    * @type {(function(KeyStore): void)[]}\n    */\n   #subscriptions = [];\n\n   /**\n    * @param {Iterable<string>}  [keyNames] -\n    *\n    * @param {KeyStoreOptions}   [options] - Optional parameters\n    */\n   constructor(keyNames, options)\n   {\n      if (!isIterable(keyNames))\n      {\n         throw new TypeError(`'keyNames' is not an iterable list.`);\n      }\n\n      this.setOptions(options);\n\n      this.#keySet = new Set(keyNames);\n   }\n\n   /**\n    * Add given key to the tracking key set.\n    *\n    * @param {string}   key - Key to add.\n    */\n   addKey(key)\n   {\n      if (typeof key !== 'string') { throw new TypeError(`'key' is not a string.`); }\n\n      this.#keySet.add(key);\n   }\n\n   /**\n    * @returns {boolean} True if any keys in the key set are pressed.\n    */\n\n   /**\n    * Returns true if any of given keys are pressed. If `keys` is undefined then the result is true if any keys being\n    * tracked are pressed.\n    *\n    * @param {string|Iterable<string>|undefined} keys - Zero or more key strings or list to verify if any pressed.\n    *\n    * @returns {boolean} True if any keys set are pressed.\n    */\n   anyPressed(keys)\n   {\n      // When no keys given then check if any key is pressed.\n      if (keys === void 0) { return this.#keyMap.size > 0; }\n\n      const isList = isIterable(keys);\n\n      if (typeof keys !== 'string' && !isList)\n      {\n         throw new TypeError(`'keys' is not a string or iterable list of strings.`);\n      }\n\n      let result = false;\n\n      if (isList)\n      {\n         for (const key of keys)\n         {\n            if (this.#keyMap.has(key))\n            {\n               result = true;\n               break;\n            }\n         }\n      }\n      else\n      {\n         if (this.#keyMap.has(keys)) { result = true; }\n      }\n\n      return result;\n   }\n\n   /**\n    * Is the given key in the tracking key set.\n    *\n    * @param {string}   key - Key to check.\n    */\n   hasKey(key)\n   {\n      if (typeof key !== 'string') { throw new TypeError(`'key' is not a string.`); }\n\n      this.#keySet.has(key);\n   }\n\n   /**\n    * Returns true if all given keys are pressed.\n    *\n    * @param {string|Iterable<string>} keys - One or more key strings to verify if pressed.\n    *\n    * @returns {boolean} Are all keys pressed.\n    */\n   isPressed(keys)\n   {\n      const isList = isIterable(keys);\n\n      if (typeof keys !== 'string' && !isList)\n      {\n         throw new TypeError(`'keys' is not a string or iterable list of strings.`);\n      }\n\n      let result = true;\n\n      if (isList)\n      {\n         for (const key of keys)\n         {\n            if (!this.#keyMap.has(key))\n            {\n               result = false;\n               break;\n            }\n         }\n      }\n      else\n      {\n         if (!this.#keyMap.has(keys)) { result = false; }\n      }\n\n      return result;\n   }\n\n   /**\n    * Handle keydown event adding any key from the tracked key set.\n    *\n    * @param {KeyboardEvent}  event - KeyboardEvent.\n    */\n   keydown(event)\n   {\n      const key = this.#options.useCode ? event.code : event.key;\n\n      if (this.#keySet.has(key))\n      {\n         if (!this.#keyMap.has(key))\n         {\n            this.#keyMap.set(key, 1);\n            this._updateSubscribers();\n         }\n\n         if (this.#options.preventDefault) { event.preventDefault(); }\n         if (this.#options.stopPropagation) { event.stopPropagation(); }\n      }\n   }\n\n   /**\n    * @returns {IterableIterator<string>} Returns current pressed keys iterator.\n    */\n   keysPressed()\n   {\n      return this.#keyMap.keys();\n   }\n\n   /**\n    * @returns {IterableIterator<string>} Returns currently tracked keys iterator.\n    */\n   keysTracked()\n   {\n      return this.#keySet.keys();\n   }\n\n   /**\n    * Handle keyup event removing any key from the tracked key set.\n    *\n    * @param {KeyboardEvent}  event - KeyboardEvent.\n    */\n   keyup(event)\n   {\n      const key = this.#options.useCode ? event.code : event.key;\n\n      if (this.#keySet.has(key))\n      {\n         if (this.#keyMap.has(key))\n         {\n            this.#keyMap.delete(key);\n            this._updateSubscribers();\n         }\n\n         if (this.#options.preventDefault) { event.preventDefault(); }\n         if (this.#options.stopPropagation) { event.stopPropagation(); }\n      }\n   }\n\n   /**\n    * Remove the given key from the tracking key set.\n    *\n    * @param {string}   key - Key to remove.\n    */\n   removeKey(key)\n   {\n      if (typeof key !== 'string') { throw new TypeError(`'key' is not a string.`); }\n\n      if (this.#keySet.has(key))\n      {\n         this.#keySet.delete(key);\n\n         if (this.#keyMap.has(key))\n         {\n            this.#keyMap.delete(key);\n            this._updateSubscribers();\n         }\n      }\n   }\n\n   /**\n    * Update options.\n    *\n    * @param {KeyStoreOptions}   options - Options to set.\n    */\n   setOptions(options)\n   {\n      if (typeof options?.preventDefault === 'boolean') { this.#options.preventDefault = options.preventDefault; }\n      if (typeof options?.useCode === 'boolean') { this.#options.useCode = options.useCode; }\n      if (typeof options?.stopPropagation === 'boolean') { this.#options.stopPropagation = options.stopPropagation; }\n   }\n\n   /**\n    * @param {string}   key - key or key code to lookup.\n    *\n    * @returns {number} 1 if currently pressed and 0 if not pressed.\n    */\n   value(key)\n   {\n      return this.#keyMap.has(key) ? 1 : 0;\n   }\n\n   // Store subscriber implementation --------------------------------------------------------------------------------\n\n   /**\n    * @param {function(KeyStore): void} handler - Callback function that is invoked on update / changes.\n    *\n    * @returns {(function(): void)} Unsubscribe function.\n    */\n   subscribe(handler)\n   {\n      this.#subscriptions.push(handler); // add handler to the array of subscribers\n\n      handler(this);                     // call handler with current value\n\n      // Return unsubscribe function.\n      return () =>\n      {\n         const index = this.#subscriptions.findIndex((sub) => sub === handler);\n         if (index >= 0) { this.#subscriptions.splice(index, 1); }\n      };\n   }\n\n   /**\n    * Updates subscribers.\n    *\n    * @protected\n    */\n   _updateSubscribers()\n   {\n      for (let cntr = 0; cntr < this.#subscriptions.length; cntr++) { this.#subscriptions[cntr](this); }\n   }\n}\n\n/**\n * @typedef {object} KeyStoreOptions\n *\n * @property {boolean}  [preventDefault=true] - Invoke `preventDefault` on key events.\n *\n * @property {boolean}  [useCode=true] - When true use `event.code` otherwise use `event.key` to get active key.\n *\n * @property {boolean}  [stopPropagation=true] - Invoke `stopPropagation` on key events.\n */\n\n// src/generator.ts\nfunction isSimpleDeriver(deriver) {\n  return deriver.length < 2;\n}\nfunction generator(storage) {\n  function readable(key, value, start) {\n    return {\n      subscribe: writable(key, value, start).subscribe\n    };\n  }\n  function writable(key, value, start = noop) {\n    function wrap_start(ogSet) {\n      return start(function wrap_set(new_value) {\n        if (storage) {\n          storage.setItem(key, JSON.stringify(new_value));\n        }\n        return ogSet(new_value);\n      });\n    }\n    if (storage) {\n      const storageValue = storage.getItem(key);\n      try {\n        if (storageValue) {\n          value = JSON.parse(storageValue);\n        }\n      } catch (err) {\n      }\n      storage.setItem(key, JSON.stringify(value));\n    }\n    const ogStore = writable$2(value, start ? wrap_start : void 0);\n    function set(new_value) {\n      if (storage) {\n        storage.setItem(key, JSON.stringify(new_value));\n      }\n      ogStore.set(new_value);\n    }\n    function update(fn) {\n      set(fn(get(ogStore)));\n    }\n    function subscribe(run, invalidate = noop) {\n      return ogStore.subscribe(run, invalidate);\n    }\n    return {set, update, subscribe};\n  }\n  function derived(key, stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single ? [stores] : stores;\n    if (storage && storage.getItem(key)) {\n      try {\n        initial_value = JSON.parse(storage.getItem(key));\n      } catch (err) {\n      }\n    }\n    return readable(key, initial_value, (set) => {\n      let inited = false;\n      const values = [];\n      let pending = 0;\n      let cleanup = noop;\n      const sync = () => {\n        if (pending) {\n          return;\n        }\n        cleanup();\n        const input = single ? values[0] : values;\n        if (isSimpleDeriver(fn)) {\n          set(fn(input));\n        } else {\n          const result = fn(input, set);\n          cleanup = is_function(result) ? result : noop;\n        }\n      };\n      const unsubscribers = stores_array.map((store, i) => store.subscribe((value) => {\n        values[i] = value;\n        pending &= ~(1 << i);\n        if (inited) {\n          sync();\n        }\n      }, () => {\n        pending |= 1 << i;\n      }));\n      inited = true;\n      sync();\n      return function stop() {\n        run_all(unsubscribers);\n        cleanup();\n      };\n    });\n  }\n  return {\n    readable,\n    writable,\n    derived,\n    get: get\n  };\n}\n\n// src/local.ts\nvar storage$1 = typeof window !== \"undefined\" ? window.localStorage : void 0;\nvar g$1 = generator(storage$1);\nvar writable$1 = g$1.writable;\n\nclass TJSLocalStorage\n{\n   /**\n    * @type {Map<string, import('svelte/store').Writable>}\n    */\n   #stores = new Map();\n\n   /**\n    * Creates a new writable store for the given key.\n    *\n    * @param {string}   key - Key to lookup in stores map.\n    *\n    * @param {boolean}  [defaultValue] - A default value to set for the store.\n    *\n    * @returns {import('svelte/store').Writable} The new store.\n    */\n   static #createStore(key, defaultValue = void 0)\n   {\n      try\n      {\n         const value = localStorage.getItem(key);\n         if (value !== null) { defaultValue = value === 'undefined' ? void 0 : JSON.parse(value); }\n      }\n      catch (err) { /**/ }\n\n      return writable$1(key, defaultValue);\n   }\n\n   /**\n    * Gets a store from the stores Map or creates a new store for the key and a given default value.\n    *\n    * @param {string}               key - Key to lookup in stores map.\n    *\n    * @param {boolean}              [defaultValue] - A default value to set for the store.\n    *\n    * @returns {import('svelte/store').Writable} The store for the given key.\n    */\n   #getStore(key, defaultValue = void 0)\n   {\n      let store = this.#stores.get(key);\n      if (store === void 0)\n      {\n         store = TJSLocalStorage.#createStore(key, defaultValue);\n         this.#stores.set(key, store);\n      }\n\n      return store;\n   }\n\n   /**\n    * Get value from the localStorage.\n    *\n    * @param {string}   key - Key to lookup in localStorage.\n    *\n    * @param {*}        [defaultValue] - A default value to return if key not present in session storage.\n    *\n    * @returns {*} Value from session storage or if not defined any default value provided.\n    */\n   getItem(key, defaultValue)\n   {\n      let value = defaultValue;\n\n      const storageValue = localStorage.getItem(key);\n\n      if (storageValue !== null)\n      {\n         try\n         {\n            value = storageValue === 'undefined' ? void 0 : JSON.parse(storageValue);\n         }\n         catch (err)\n         {\n            value = defaultValue;\n         }\n      }\n      else if (defaultValue !== void 0)\n      {\n         try\n         {\n            const newValue = JSON.stringify(defaultValue);\n\n            // If there is no existing storage value and defaultValue is defined the storage value needs to be set.\n            localStorage.setItem(key, newValue === 'undefined' ? void 0 : newValue);\n         }\n         catch (err) { /* */ }\n      }\n\n      return value;\n   }\n\n   /**\n    * Returns the backing Svelte store for the given key; potentially sets a default value if the key\n    * is not already set.\n    *\n    * @param {string}   key - Key to lookup in localStorage.\n    *\n    * @param {*}        [defaultValue] - A default value to return if key not present in session storage.\n    *\n    * @returns {import('svelte/store').Writable} The Svelte store for this key.\n    */\n   getStore(key, defaultValue)\n   {\n      return this.#getStore(key, defaultValue);\n   }\n\n   /**\n    * Sets the value for the given key in localStorage.\n    *\n    * @param {string}   key - Key to lookup in localStorage.\n    *\n    * @param {*}        value - A value to set for this key.\n    */\n   setItem(key, value)\n   {\n      const store = this.#getStore(key);\n      store.set(value);\n   }\n\n   /**\n    * Convenience method to swap a boolean value stored in session storage.\n    *\n    * @param {string}   key - Key to lookup in localStorage.\n    *\n    * @param {boolean}  [defaultValue] - A default value to return if key not present in session storage.\n    *\n    * @returns {boolean} The boolean swap for the given key.\n    */\n   swapItemBoolean(key, defaultValue)\n   {\n      const store = this.#getStore(key, defaultValue);\n\n      let currentValue = false;\n\n      try\n      {\n         currentValue = !!JSON.parse(localStorage.getItem(key));\n      }\n      catch (err) { /**/ }\n\n      const newValue = typeof currentValue === 'boolean' ? !currentValue : false;\n\n      store.set(newValue);\n      return newValue;\n   }\n}\n\n// src/session.ts\nvar storage = typeof window !== \"undefined\" ? window.sessionStorage : void 0;\nvar g = generator(storage);\nvar writable = g.writable;\n\nclass TJSSessionStorage\n{\n   /**\n    * @type {Map<string, import('svelte/store').Writable>}\n    */\n   #stores = new Map();\n\n   /**\n    * Creates a new store for the given key.\n    *\n    * @param {string}   key - Key to lookup in stores map.\n    *\n    * @param {boolean}  [defaultValue] - A default value to set for the store.\n    *\n    * @returns {import('svelte/store').Writable} The new store.\n    */\n   static #createStore(key, defaultValue = void 0)\n   {\n      try\n      {\n         const value = sessionStorage.getItem(key);\n         if (value !== null) { defaultValue = value === 'undefined' ? void 0 : JSON.parse(value); }\n      }\n      catch (err) { /**/ }\n\n      return writable(key, defaultValue);\n   }\n\n   /**\n    * Gets a store from the `stores` Map or creates a new store for the key and a given default value.\n    *\n    * @param {string}               key - Key to lookup in stores map.\n    *\n    * @param {boolean}              [defaultValue] - A default value to set for the store.\n    *\n    * @returns {import('svelte/store').Writable} The store for the given key.\n    */\n   #getStore(key, defaultValue = void 0)\n   {\n      let store = this.#stores.get(key);\n      if (store === void 0)\n      {\n         store = TJSSessionStorage.#createStore(key, defaultValue);\n         this.#stores.set(key, store);\n      }\n\n      return store;\n   }\n\n   /**\n    * Get value from the sessionStorage.\n    *\n    * @param {string}   key - Key to lookup in sessionStorage.\n    *\n    * @param {*}        [defaultValue] - A default value to return if key not present in session storage.\n    *\n    * @returns {*} Value from session storage or if not defined any default value provided.\n    */\n   getItem(key, defaultValue)\n   {\n      let value = defaultValue;\n\n      const storageValue = sessionStorage.getItem(key);\n\n      if (storageValue !== null)\n      {\n         try\n         {\n            value = storageValue === 'undefined' ? void 0 : JSON.parse(storageValue);\n         }\n         catch (err)\n         {\n            value = defaultValue;\n         }\n      }\n      else if (defaultValue !== void 0)\n      {\n         try\n         {\n            const newValue = JSON.stringify(defaultValue);\n\n            // If there is no existing storage value and defaultValue is defined the storage value needs to be set.\n            sessionStorage.setItem(key, newValue === 'undefined' ? void 0 : newValue);\n         }\n         catch (err) { /* */ }\n      }\n\n      return value;\n   }\n\n   /**\n    * Returns the backing Svelte store for the given key; potentially sets a default value if the key\n    * is not already set.\n    *\n    * @param {string}   key - Key to lookup in sessionStorage.\n    *\n    * @param {*}        [defaultValue] - A default value to return if key not present in session storage.\n    *\n    * @returns {import('svelte/store').Writable} The Svelte store for this key.\n    */\n   getStore(key, defaultValue)\n   {\n      return this.#getStore(key, defaultValue);\n   }\n\n   /**\n    * Sets the value for the given key in sessionStorage.\n    *\n    * @param {string}   key - Key to lookup in sessionStorage.\n    *\n    * @param {*}        value - A value to set for this key.\n    */\n   setItem(key, value)\n   {\n      const store = this.#getStore(key);\n      store.set(value);\n   }\n\n   /**\n    * Convenience method to swap a boolean value stored in session storage.\n    *\n    * @param {string}   key - Key to lookup in sessionStorage.\n    *\n    * @param {boolean}  [defaultValue] - A default value to return if key not present in session storage.\n    *\n    * @returns {boolean} The boolean swap for the given key.\n    */\n   swapItemBoolean(key, defaultValue)\n   {\n      const store = this.#getStore(key, defaultValue);\n\n      let currentValue = false;\n\n      try\n      {\n         currentValue = !!JSON.parse(sessionStorage.getItem(key));\n      }\n      catch (err) { /**/ }\n\n      const newValue = typeof currentValue === 'boolean' ? !currentValue : false;\n\n      store.set(newValue);\n      return newValue;\n   }\n}\n\n/**\n * Provides a basic test for a given variable to test if it has the shape of a readable store by having a `subscribe`\n * function.\n *\n * Note: functions are also objects, so test that the variable might be a function w/ a `subscribe` function.\n *\n * @param {*}  store - variable to test that might be a store.\n *\n * @returns {boolean} Whether the variable tested has the shape of a store.\n */\nfunction isReadableStore(store)\n{\n   if (store === null || store === void 0) { return false; }\n\n   switch (typeof store)\n   {\n      case 'function':\n      case 'object':\n         return typeof store.subscribe === 'function';\n   }\n\n   return false;\n}\n\n/**\n * Provides a basic test for a given variable to test if it has the shape of a writable store by having a `subscribe`\n * function and an `update` function.\n *\n * Note: functions are also objects, so test that the variable might be a function w/ a `subscribe` function.\n *\n * @param {*}  store - variable to test that might be a store.\n *\n * @returns {boolean} Whether the variable tested has the shape of a store.\n */\nfunction isUpdatableStore(store)\n{\n   if (store === null || store === void 0) { return false; }\n\n   switch (typeof store)\n   {\n      case 'function':\n      case 'object':\n         return typeof store.subscribe === 'function' && typeof store.update === 'function';\n   }\n\n   return false;\n}\n\n/**\n * Provides a basic test for a given variable to test if it has the shape of a writable store by having a `subscribe`\n * `set`, and `update` functions.\n *\n * Note: functions are also objects, so test that the variable might be a function w/ `subscribe` & `set` functions.\n *\n * @param {*}  store - variable to test that might be a store.\n *\n * @returns {boolean} Whether the variable tested has the shape of a store.\n */\nfunction isWritableStore(store)\n{\n   if (store === null || store === void 0) { return false; }\n\n   switch (typeof store)\n   {\n      case 'function':\n      case 'object':\n         return typeof store.subscribe === 'function' && typeof store.set === 'function';\n   }\n\n   return false;\n}\n\n/**\n * Subscribes to the given store with the update function provided and ignores the first automatic\n * update. All future updates are dispatched to the update function.\n *\n * @param {import('svelte/store').Readable | import('svelte/store').Writable} store -\n *  Store to subscribe to...\n *\n * @param {import('svelte/store').Updater} update - function to receive future updates.\n *\n * @returns {import('svelte/store').Unsubscriber} Store unsubscribe function.\n */\nfunction subscribeIgnoreFirst(store, update)\n{\n   let firedFirst = false;\n\n   return store.subscribe((value) =>\n   {\n      if (!firedFirst)\n      {\n         firedFirst = true;\n      }\n      else\n      {\n         update(value);\n      }\n   });\n}\n\n/**\n * Subscribes to the given store with two update functions provided. The first function is invoked on the initial\n * subscription. All future updates are dispatched to the update function.\n *\n * @param {import('svelte/store').Readable | import('svelte/store').Writable} store -\n *  Store to subscribe to...\n *\n * @param {import('svelte/store').Updater} first - Function to receive first update.\n *\n * @param {import('svelte/store').Updater} update - Function to receive future updates.\n *\n * @returns {import('svelte/store').Unsubscriber} Store unsubscribe function.\n */\nfunction subscribeFirstRest(store, first, update)\n{\n   let firedFirst = false;\n\n   return store.subscribe((value) =>\n   {\n      if (!firedFirst)\n      {\n         firedFirst = true;\n         first(value);\n      }\n      else\n      {\n         update(value);\n      }\n   });\n}\n\n/**\n * @external Store\n * @see [Svelte stores](https://svelte.dev/docs#component-format-script-4-prefix-stores-with-$-to-access-their-values-store-contract)\n */\n\n/**\n * Create a store similar to [Svelte's `derived`](https://svelte.dev/docs#run-time-svelte-store-writable),\n * but which has its own `set` and `update` methods and can send values back to the origin stores.\n * [Read more...](https://github.com/PixievoltNo1/svelte-writable-derived#default-export-writablederived)\n * \n * @param {Store|Store[]} origins One or more stores to derive from. Same as\n * [`derived`](https://svelte.dev/docs#run-time-svelte-store-writable)'s 1st parameter.\n * @param {!Function} derive The callback to determine the derived value. Same as\n * [`derived`](https://svelte.dev/docs#run-time-svelte-store-writable)'s 2nd parameter.\n * @param {!Function} reflect Called when the derived store gets a new value via its `set` or\n * `update` methods, and determines new values for the origin stores.\n * [Read more...](https://github.com/PixievoltNo1/svelte-writable-derived#new-parameter-reflect)\n * @param [initial] The new store's initial value. Same as\n * [`derived`](https://svelte.dev/docs#run-time-svelte-store-writable)'s 3rd parameter.\n * \n * @returns {Store} A writable store.\n */\nfunction writableDerived(origins, derive, reflect, initial) {\n\tvar childDerivedSetter, originValues, blockNextDerive = false;\n\tvar reflectOldValues = reflect.length >= 2;\n\tvar wrappedDerive = (got, set) => {\n\t\tchildDerivedSetter = set;\n\t\tif (reflectOldValues) {\n\t\t\toriginValues = got;\n\t\t}\n\t\tif (!blockNextDerive) {\n\t\t\tlet returned = derive(got, set);\n\t\t\tif (derive.length < 2) {\n\t\t\t\tset(returned);\n\t\t\t} else {\n\t\t\t\treturn returned;\n\t\t\t}\n\t\t}\n\t\tblockNextDerive = false;\n\t};\n\tvar childDerived = derived(origins, wrappedDerive, initial);\n\t\n\tvar singleOrigin = !Array.isArray(origins);\n\tfunction doReflect(reflecting) {\n\t\tvar setWith = reflect(reflecting, originValues);\n\t\tif (singleOrigin) {\n\t\t\tblockNextDerive = true;\n\t\t\torigins.set(setWith);\n\t\t} else {\n\t\t\tsetWith.forEach( (value, i) => {\n\t\t\t\tblockNextDerive = true;\n\t\t\t\torigins[i].set(value);\n\t\t\t} );\n\t\t}\n\t\tblockNextDerive = false;\n\t}\n\t\n\tvar tryingSet = false;\n\tfunction update(fn) {\n\t\tvar isUpdated, mutatedBySubscriptions, oldValue, newValue;\n\t\tif (tryingSet) {\n\t\t\tnewValue = fn( get(childDerived) );\n\t\t\tchildDerivedSetter(newValue);\n\t\t\treturn;\n\t\t}\n\t\tvar unsubscribe = childDerived.subscribe( (value) => {\n\t\t\tif (!tryingSet) {\n\t\t\t\toldValue = value;\n\t\t\t} else if (!isUpdated) {\n\t\t\t\tisUpdated = true;\n\t\t\t} else {\n\t\t\t\tmutatedBySubscriptions = true;\n\t\t\t}\n\t\t} );\n\t\tnewValue = fn(oldValue);\n\t\ttryingSet = true;\n\t\tchildDerivedSetter(newValue);\n\t\tunsubscribe();\n\t\ttryingSet = false;\n\t\tif (mutatedBySubscriptions) {\n\t\t\tnewValue = get(childDerived);\n\t\t}\n\t\tif (isUpdated) {\n\t\t\tdoReflect(newValue);\n\t\t}\n\t}\n\treturn {\n\t\tsubscribe: childDerived.subscribe,\n\t\tset(value) { update( () => value ); },\n\t\tupdate,\n\t};\n}\n\n/**\n * Create a store for a property value in an object contained in another store.\n * [Read more...](https://github.com/PixievoltNo1/svelte-writable-derived#named-export-propertystore)\n * \n * @param {Store} origin The store containing the object to get/set from.\n * @param {string|number|symbol|Array<string|number|symbol>} propName The property to get/set, or a path of\n * properties in nested objects.\n *\n * @returns {Store} A writable store.\n */\nfunction propertyStore(origin, propName) {\n\tif (!Array.isArray(propName)) {\n\t\treturn writableDerived(\n\t\t\torigin,\n\t\t\t(object) => object[propName],\n\t\t\t(reflecting, object) => {\n\t\t\t\tobject[propName] = reflecting;\n\t\t\t\treturn object;\n\t\t\t},\n\t\t);\n\t} else {\n\t\tlet props = propName.concat();\n\t\treturn writableDerived(\n\t\t\torigin,\n\t\t\t(value) => {\n\t\t\t\tfor (let i = 0; i < props.length; ++i) {\n\t\t\t\t\tvalue = value[ props[i] ];\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t},\n\t\t\t(reflecting, object) => {\n\t\t\t\tlet target = object;\n\t\t\t\tfor (let i = 0; i < props.length - 1; ++i) {\n\t\t\t\t\ttarget = target[ props[i] ];\n\t\t\t\t}\n\t\t\t\ttarget[ props[props.length - 1] ] = reflecting;\n\t\t\t\treturn object;\n\t\t\t},\n\t\t);\n\t}\n}\n\n/**\n * Provides management of reactive embedded collections.\n *\n * TODO: Consider subscribing to TJSDocument rather than exposing {@link EmbeddedStoreManager.handleDocChange} and\n * {@link EmbeddedStoreManager.handleUpdate}\n */\nclass EmbeddedStoreManager\n{\n   /**\n    * RegExp for detecting CRUD updates for renderContext.\n    *\n    * @type {RegExp}\n    */\n   static #renderContextRegex = /(create|delete|update)(\\w+)/;\n\n   /**\n    * @type {Map<string, EmbeddedCollectionData>}\n    */\n   #name = new Map();\n\n   /**\n    * @type {foundry.abstract.Document[]}\n    */\n   #document;\n\n   /**\n    * @type {Set<string>}\n    */\n   #embeddedNames = new Set();\n\n   /**\n    * @param {foundry.abstract.Document[]} document - The associated document holder.\n    */\n   constructor(document)\n   {\n      this.#document = document;\n\n      this.handleDocChange();\n\n      Object.seal(this);\n   }\n\n   /**\n    * @template T\n    *\n    * @param {string} embeddedName -\n    *\n    * @param {import('@typhonjs-fvtt/svelte/store').OptionsDynMapCreate<string, T>} options -\n    *\n    * @returns {import('@typhonjs-fvtt/svelte/store').DynMapReducer<string, T>} DynMapReducer instance\n    */\n   create(embeddedName, options)\n   {\n      /** @type {foundry.abstract.Document} */\n      const doc = this.#document[0];\n\n      let collection = null;\n\n      if (doc)\n      {\n         try\n         {\n            collection = doc.getEmbeddedCollection(embeddedName);\n         }\n         catch (err)\n         {\n            console.warn(`EmbeddedStoreManager.create error: No valid embedded collection for: ${embeddedName}`);\n         }\n      }\n\n      let embeddedData;\n\n      if (!this.#name.has(embeddedName))\n      {\n         embeddedData = {\n            collection,\n            stores: new Map()\n         };\n\n         this.#name.set(embeddedName, embeddedData);\n      }\n      else\n      {\n         embeddedData = this.#name.get(embeddedName);\n      }\n\n      /** @type {string} */\n      let name;\n\n      /** @type {import('@typhonjs-fvtt/svelte/store').DataOptions<T>} */\n      let rest = {};\n\n      /** @type {import('@typhonjs-fvtt/svelte/store').IDynMapReducerCtor<string, T>} */\n      let ctor;\n\n      if (typeof options === 'string')\n      {\n         name = options;\n         ctor = DynMapReducer;\n      }\n      else if (typeof options === 'function' && hasPrototype(options, DynMapReducer))\n      {\n         ctor = options;\n      }\n      else if (isObject(options))\n      {\n         ({ name, ctor = DynMapReducer, ...rest } = options);\n      }\n      else\n      {\n         throw new TypeError(`EmbeddedStoreManager.create error: 'options' does not conform to allowed parameters.`);\n      }\n\n      if (!hasPrototype(ctor, DynMapReducer))\n      {\n         throw new TypeError(`EmbeddedStoreManager.create error: 'ctor' is not a 'DynMapReducer'.`);\n      }\n\n      name = name ?? ctor?.name;\n\n      if (typeof name !== 'string') { throw new TypeError(`EmbeddedStoreManager.create error: 'name' is not a string.`); }\n\n      if (embeddedData.stores.has(name))\n      {\n         return embeddedData.stores.get(name);\n      }\n      else\n      {\n         const storeOptions = collection ? { data: collection, ...rest } : { ...rest };\n         const store = new ctor(storeOptions);\n         embeddedData.stores.set(name, store);\n         return store;\n      }\n   }\n\n   /**\n    * Destroys and removes embedded collection stores. Invoking this method with no parameters destroys all stores.\n    * Invoking with an embedded name destroys all stores for that particular collection. If you provide an embedded and\n    * store name just that particular store is destroyed and removed.\n    *\n    * @param {string}   [embeddedName] - Specific embedded collection name.\n    *\n    * @param {string}   [storeName] - Specific store name.\n    *\n    * @returns {boolean} One or more stores destroyed?\n    */\n   destroy(embeddedName, storeName)\n   {\n      let count = 0;\n\n      // Destroy all embedded stores\n      if (embeddedName === void 0)\n      {\n         for (const embeddedData of this.#name.values())\n         {\n            embeddedData.collection = null;\n            for (const store of embeddedData.stores.values())\n            {\n               store.destroy();\n               count++;\n            }\n         }\n\n         this.#name.clear();\n      }\n      else if (typeof embeddedName === 'string' && storeName === void 0)\n      {\n         const embeddedData = this.#name.get(embeddedName);\n         if (embeddedData)\n         {\n            embeddedData.collection = null;\n            for (const store of embeddedData.stores.values())\n            {\n               store.destroy();\n               count++;\n            }\n         }\n\n         this.#name.delete(embeddedName);\n      }\n      else if (typeof embeddedName === 'string' && storeName === 'string')\n      {\n         const embeddedData = this.#name.get(embeddedName);\n         if (embeddedData)\n         {\n            const store = embeddedData.stores.get(storeName);\n            if (store)\n            {\n               store.destroy();\n               count++;\n            }\n         }\n      }\n\n      return count > 0;\n   }\n\n   /**\n    * @template T\n    *\n    * @param {string} embeddedName -\n    *\n    * @param {string} storeName -\n    *\n    * @returns {import('@typhonjs-fvtt/svelte/store').DynMapReducer<string, T>} DynMapReducer instance.\n    */\n   get(embeddedName, storeName)\n   {\n      if (!this.#name.has(embeddedName)) { return void 0; }\n\n      return this.#name.get(embeddedName).stores.get(storeName);\n   }\n\n   /**\n    * Updates all existing embedded collection stores with the associated embedded collection\n    */\n   handleDocChange()\n   {\n      const doc = this.#document[0];\n\n      if (doc instanceof globalThis.foundry.abstract.Document)\n      {\n         const existingEmbeddedNames = new Set(this.#name.keys());\n\n         /** @type {string[]} */\n         const embeddedNames = Object.keys(doc.constructor?.metadata?.embedded ?? []);\n\n         // Remove all previously stored embedded name CRUD keys.\n         this.#embeddedNames.clear();\n\n         for (const embeddedName of embeddedNames)\n         {\n            // Remove processed embedded name from existingEmbeddedNames set.\n            existingEmbeddedNames.delete(embeddedName);\n\n            // Update CRUD keys.\n            this.#embeddedNames.add(`create${embeddedName}`);\n            this.#embeddedNames.add(`delete${embeddedName}`);\n            this.#embeddedNames.add(`update${embeddedName}`);\n\n            let collection = null;\n\n            try\n            {\n               // Update any existing stores with the actual collection.\n               collection = doc.getEmbeddedCollection(embeddedName);\n            }\n            catch (err)\n            {\n               console.warn(`EmbeddedStoreManager.handleDocUpdate error: No valid embedded collection for: ${\n                embeddedName}`);\n            }\n\n            // Update EmbeddedData for new collection.\n            const embeddedData = this.#name.get(embeddedName);\n            if (embeddedData)\n            {\n               embeddedData.collection = collection;\n\n               // Update all existing stores.\n               for (const store of embeddedData.stores.values()) { store.setData(collection, true); }\n            }\n         }\n\n         // Update all existing embedded collections with null data that aren't processed above.\n         for (const embeddedName of existingEmbeddedNames)\n         {\n            const embeddedData = this.#name.get(embeddedName);\n            if (embeddedData)\n            {\n               embeddedData.collection = null;\n\n               for (const store of embeddedData.stores.values()) { store.setData(null, true); }\n            }\n         }\n      }\n      else // Reset all embedded reducer stores to null data.\n      {\n         this.#embeddedNames.clear();\n\n         for (const embeddedData of this.#name.values())\n         {\n            embeddedData.collection = null;\n\n            for (const store of embeddedData.stores.values()) { store.setData(null, true); }\n         }\n      }\n   }\n\n   /**\n    * Handles updates to embedded stores parsing the render context for valid embedded store types.\n    *\n    * On create, delete, update parse the type being modified then force index updates for the embedded type.\n    *\n    * @param {string}   renderContext - render context update from document.\n    */\n   handleUpdate(renderContext)\n   {\n      if (!this.#embeddedNames.has(renderContext)) { return; }\n\n      const match = EmbeddedStoreManager.#renderContextRegex.exec(renderContext);\n\n      if (match)\n      {\n         const embeddedName = match[2];\n         if (!this.#name.has(embeddedName)) { return; }\n\n         for (const store of this.#name.get(embeddedName).stores.values())\n         {\n            store.index.update(true);\n         }\n      }\n   }\n}\n\n/**\n * @typedef {object} EmbeddedCollectionData\n *\n * @property {foundry.abstract.Collection} collection -\n *\n * @property {Map<string, import('@typhonjs-fvtt/svelte/store').DynMapReducer<string, T>>} stores -\n */\n\n/**\n * Provides a wrapper implementing the Svelte store / subscriber protocol around any Document / ClientMixinDocument.\n * This makes documents reactive in a Svelte component, but otherwise provides subscriber functionality external to\n * Svelte.\n */\nclass TJSDocument\n{\n   /**\n    * @type {foundry.abstract.Document[]}\n    */\n   #document = [void 0];\n\n   /**\n    * @type {EmbeddedStoreManager}\n    */\n   #embeddedStoreManager;\n   #embeddedAPI;\n\n   /**\n    * @type {string}\n    */\n   #uuidv4;\n\n   /**\n    * @type {TJSDocumentOptions}\n    */\n   #options = { delete: void 0, preDelete: void 0 };\n\n   #subscriptions = [];\n   #updateOptions;\n\n   /**\n    * @param {foundry.abstract.Document | TJSDocumentOptions}  [document] - Document to wrap or TJSDocumentOptions.\n    *\n    * @param {TJSDocumentOptions}      [options] - TJSDocument options.\n    */\n   constructor(document, options = {})\n   {\n      this.#uuidv4 = `tjs-document-${uuidv4()}`;\n\n      if (isPlainObject(document)) // Handle case when only options are passed into ctor.\n      {\n         this.setOptions(document);\n      }\n      else\n      {\n         this.setOptions(options);\n         this.set(document);\n      }\n   }\n\n   /**\n    * @returns {EmbeddedAPI} Embedded store manager.\n    */\n   get embedded()\n   {\n      if (!this.#embeddedAPI)\n      {\n         this.#embeddedStoreManager = new EmbeddedStoreManager(this.#document);\n         this.#embeddedAPI = {\n            create: (embeddedName, options) => this.#embeddedStoreManager.create(embeddedName, options),\n            destroy: (embeddedName, storeName) => this.#embeddedStoreManager.destroy(embeddedName, storeName),\n            get: (embeddedName, storeName) => this.#embeddedStoreManager.get(embeddedName, storeName)\n         };\n      }\n\n      return this.#embeddedAPI;\n   }\n\n   /**\n    * Returns the options passed on last update.\n    *\n    * @returns {object} Last update options.\n    */\n   get updateOptions() { return this.#updateOptions ?? {}; }\n\n   /**\n    * Returns the UUID assigned to this store.\n    *\n    * @returns {string} UUID\n    */\n   get uuidv4() { return this.#uuidv4; }\n\n   /**\n    * Handles cleanup when the document is deleted. Invoking any optional delete function set in the constructor.\n    *\n    * @returns {Promise<void>}\n    */\n   async #deleted()\n   {\n      const doc = this.#document[0];\n\n      // Check to see if the document is still in the associated collection to determine if actually deleted.\n      if (doc instanceof globalThis.foundry.abstract.Document && !doc?.collection?.has(doc.id))\n      {\n         delete doc?.apps[this.#uuidv4];\n         this.#setDocument(void 0);\n\n         if (typeof this.#options.preDelete === 'function')\n         {\n            await this.#options.preDelete(doc);\n         }\n\n         this.#updateSubscribers(false, { action: 'delete', data: void 0 });\n\n         if (typeof this.#options.delete === 'function')\n         {\n            await this.#options.delete(doc);\n         }\n\n         this.#updateOptions = void 0;\n      }\n   }\n\n   /**\n    * Completely removes all internal subscribers, any optional delete callback, and unregisters from the\n    * ClientDocumentMixin `apps` tracking object.\n    */\n   destroy()\n   {\n      const doc = this.#document[0];\n\n      if (this.#embeddedStoreManager)\n      {\n         this.#embeddedStoreManager.destroy();\n         this.#embeddedStoreManager = void 0;\n         this.#embeddedAPI = void 0;\n      }\n\n      if (doc instanceof globalThis.foundry.abstract.Document)\n      {\n         delete doc?.apps[this.#uuidv4];\n         this.#setDocument(void 0);\n      }\n\n      this.#options.delete = void 0;\n      this.#subscriptions.length = 0;\n   }\n\n   /**\n    * @param {boolean}  [force] - unused - signature from Foundry render function.\n    *\n    * @param {object}   [options] - Options from render call; will have document update context.\n    */\n   #updateSubscribers(force = false, options = {}) // eslint-disable-line no-unused-vars\n   {\n      this.#updateOptions = options;\n\n      const doc = this.#document[0];\n\n      for (let cntr = 0; cntr < this.#subscriptions.length; cntr++) { this.#subscriptions[cntr](doc, options); }\n\n      if (this.#embeddedStoreManager)\n      {\n         this.#embeddedStoreManager.handleUpdate(options.renderContext);\n      }\n   }\n\n   /**\n    * @returns {foundry.abstract.Document | undefined} Current document\n    */\n   get() { return this.#document[0]; }\n\n   /**\n    * @param {foundry.abstract.Document | undefined}  document - New document to set.\n    *\n    * @param {object}         [options] - New document update options to set.\n    */\n   set(document, options = {})\n   {\n      if (this.#document[0])\n      {\n         delete this.#document[0].apps[this.#uuidv4];\n      }\n\n      if (document !== void 0 && !(document instanceof globalThis.foundry.abstract.Document))\n      {\n         throw new TypeError(`TJSDocument set error: 'document' is not a valid Document or undefined.`);\n      }\n\n      if (options === null || typeof options !== 'object')\n      {\n         throw new TypeError(`TJSDocument set error: 'options' is not an object.`);\n      }\n\n      if (document instanceof globalThis.foundry.abstract.Document)\n      {\n         document.apps[this.#uuidv4] = {\n            close: this.#deleted.bind(this),\n            render: this.#updateSubscribers.bind(this)\n         };\n      }\n\n      this.#setDocument(document);\n      this.#updateOptions = options;\n      this.#updateSubscribers();\n   }\n\n   /**\n    *\n    * @param {foundry.abstract.Document | undefined} doc -\n    */\n   #setDocument(doc)\n   {\n      this.#document[0] = doc;\n\n      if (this.#embeddedStoreManager) { this.#embeddedStoreManager.handleDocChange(); }\n   }\n\n   /**\n    * Potentially sets new document from data transfer object.\n    *\n    * @param {object}   data - Document transfer data.\n    *\n    * @param {ParseDataTransferOptions & TJSDocumentOptions}   [options] - Optional parameters.\n    *\n    * @returns {Promise<boolean>} Returns true if new document set from data transfer blob.\n    */\n   async setFromDataTransfer(data, options)\n   {\n      return this.setFromUUID(getUUIDFromDataTransfer(data, options), options);\n   }\n\n   /**\n    * Sets the document by Foundry UUID performing a lookup and setting the document if found.\n    *\n    * @param {string}   uuid - A Foundry UUID to lookup.\n    *\n    * @param {TJSDocumentOptions}   [options] - New document update options to set.\n    *\n    * @returns {Promise<boolean>} True if successfully set document from UUID.\n    */\n   async setFromUUID(uuid, options = {})\n   {\n      if (typeof uuid !== 'string' || uuid.length === 0) { return false; }\n\n      try\n      {\n         const doc = await globalThis.fromUuid(uuid);\n\n         if (doc)\n         {\n            this.set(doc, options);\n            return true;\n         }\n      }\n      catch (err) { /**/ }\n\n      return false;\n   }\n\n   /**\n    * Sets options for this document wrapper / store.\n    *\n    * @param {TJSDocumentOptions}   options - Options for TJSDocument.\n    */\n   setOptions(options)\n   {\n      if (!isObject$1(options))\n      {\n         throw new TypeError(`TJSDocument error: 'options' is not a plain object.`);\n      }\n\n      // Verify valid values -------------\n\n      if (options.delete !== void 0 && typeof options.delete !== 'function')\n      {\n         throw new TypeError(`TJSDocument error: 'delete' attribute in options is not a function.`);\n      }\n\n      if (options.preDelete !== void 0 && typeof options.preDelete !== 'function')\n      {\n         throw new TypeError(`TJSDocument error: 'preDelete' attribute in options is not a function.`);\n      }\n\n      // Set any valid values -------------\n\n      if (options.delete === void 0 || typeof options.delete === 'function')\n      {\n         this.#options.delete = options.delete;\n      }\n\n      if (options.preDelete === void 0 || typeof options.preDelete === 'function')\n      {\n         this.#options.preDelete = options.preDelete;\n      }\n   }\n\n   /**\n    * @param {function(foundry.abstract.Document, object): void} handler - Callback function that is invoked on update / changes.\n    *\n    * @returns {(function(): void)} Unsubscribe function.\n    */\n   subscribe(handler)\n   {\n      this.#subscriptions.push(handler);           // Add handler to the array of subscribers.\n\n      const updateOptions = { action: 'subscribe', data: void 0 };\n\n      handler(this.#document[0], updateOptions);      // Call handler with current value and update options.\n\n      // Return unsubscribe function.\n      return () =>\n      {\n         const index = this.#subscriptions.findIndex((sub) => sub === handler);\n         if (index >= 0) { this.#subscriptions.splice(index, 1); }\n      };\n   }\n}\n\n/**\n * @typedef {object} TJSDocumentOptions\n *\n * @property {(doc: foundry.abstract.Document) => void} [delete] - Optional post delete function to invoke when\n *           document is deleted _after_ subscribers have been notified.\n *\n * @property {(doc: foundry.abstract.Document) => void} [preDelete] - Optional pre delete function to invoke when\n *           document is deleted _before_ subscribers are notified.\n */\n\n/**\n * @typedef {object} EmbeddedAPI\n *\n * @property {(embeddedName: string, options: import('@typhonjs-fvtt/runtime/svelte/store').OptionsDynMapCreate<string, any>) => import('@typhonjs-fvtt/runtime/svelte/store').DynMapReducer<string, T>} create - Creates an embedded collection store.\n *\n * @property {(embeddedName?: string, storeName?: string) => boolean} destroy - Destroys one or more embedded collection stores.\n *\n * @property {(embeddedName: string, storeName: string) => import('@typhonjs-fvtt/runtime/svelte/store').DynMapReducer<string, T>} get - Returns a specific existing embedded collection store.\n */\n\n/**\n * Provides a wrapper implementing the Svelte store / subscriber protocol around any DocumentCollection. This makes\n * document collections reactive in a Svelte component, but otherwise provides subscriber functionality external to\n * Svelte.\n *\n * @template {DocumentCollection} T\n */\nclass TJSDocumentCollection\n{\n   #collection;\n   #collectionCallback;\n   #uuid;\n\n   /**\n    * @type {TJSDocumentCollectionOptions}\n    */\n   #options = { delete: void 0, preDelete: void 0 };\n\n   #subscriptions = [];\n   #updateOptions;\n\n   /**\n    * @param {T|TJSDocumentCollectionOptions}   [collection] - Collection to wrap or TJSDocumentCollectionOptions.\n    *\n    * @param {TJSDocumentCollectionOptions}     [options] - TJSDocumentCollection options.\n    */\n   constructor(collection, options = {})\n   {\n      this.#uuid = `tjs-collection-${uuidv4()}`;\n\n      if (isPlainObject(collection)) // Handle case when only options are passed into ctor.\n      {\n         this.setOptions(collection);\n      }\n      else\n      {\n         this.setOptions(options);\n         this.set(collection);\n      }\n   }\n\n   /**\n    * Returns the options passed on last update.\n    *\n    * @returns {object} Last update options.\n    */\n   get updateOptions() { return this.#updateOptions ?? {}; }\n\n   /**\n    * Returns the UUID assigned to this store.\n    *\n    * @returns {*} UUID\n    */\n   get uuid() { return this.#uuid; }\n\n   /**\n    * Handles cleanup when the collection is deleted. Invoking any optional delete function set in the constructor.\n    *\n    * @returns {Promise<void>}\n    */\n   async #deleted()\n   {\n      const collection = this.#collection;\n\n      if (collection instanceof DocumentCollection)\n      {\n         const index = collection?.apps?.findIndex((sub) => sub === this.#collectionCallback);\n         if (index >= 0) { collection?.apps?.splice(index, 1); }\n\n         this.#collection = void 0;\n      }\n\n      if (typeof this.#options.preDelete === 'function')\n      {\n         await this.#options.preDelete(collection);\n      }\n\n      this.#notify(false, { action: 'delete', documentType: collection.documentName, documents: [], data: [] });\n\n      if (typeof this.#options.delete === 'function')\n      {\n         await this.#options.delete(collection);\n      }\n\n      this.#updateOptions = void 0;\n   }\n\n   /**\n    * Completely removes all internal subscribers, any optional delete callback, and unregisters from the\n    * DocumentCollection `apps` tracking array.\n    */\n   destroy()\n   {\n      const collection = this.#collection;\n\n      if (collection instanceof DocumentCollection)\n      {\n         const index = collection?.apps?.findIndex((sub) => sub === this.#collectionCallback);\n         if (index >= 0) { collection?.apps?.splice(index, 1); }\n\n         this.#collection = void 0;\n      }\n\n      this.#options.delete = void 0;\n      this.#subscriptions.length = 0;\n   }\n\n   /**\n    * @param {boolean}  [force] - unused - signature from Foundry render function.\n    *\n    * @param {object}   [options] - Options from render call; will have collection update context.\n    */\n   #notify(force = false, options = {}) // eslint-disable-line no-unused-vars\n   {\n      this.#updateOptions = options;\n\n      // Subscriptions are stored locally as on the browser Babel is still used for private class fields / Babel\n      // support until 2023. IE not doing this will require several extra method calls otherwise.\n      const subscriptions = this.#subscriptions;\n      const collection = this.#collection;\n\n      for (let cntr = 0; cntr < subscriptions.length; cntr++) { subscriptions[cntr](collection, options); }\n   }\n\n   /**\n    * @returns {T | undefined} Current collection\n    */\n   get() { return this.#collection; }\n\n   /**\n    * @param {T | undefined}  collection - New collection to set.\n    *\n    * @param {object}         [options] - New collection update options to set.\n    */\n   set(collection, options = {})\n   {\n      if (this.#collection)\n      {\n         const index = this.#collection.apps.findIndex((sub) => sub === this.#collectionCallback);\n         if (index >= 0) { this.#collection.apps.splice(index, 1); }\n\n         this.#collectionCallback = void 0;\n      }\n\n      if (collection !== void 0 && !(collection instanceof DocumentCollection))\n      {\n         throw new TypeError(\n          `TJSDocumentCollection set error: 'collection' is not a valid DocumentCollection or undefined.`);\n      }\n\n      if (!isObject$1(options))\n      {\n         throw new TypeError(`TJSDocument set error: 'options' is not an object.`);\n      }\n\n      if (collection instanceof DocumentCollection)\n      {\n         this.#collectionCallback = {\n            close: this.#deleted.bind(this),\n            render: this.#notify.bind(this)\n         };\n\n         collection?.apps?.push(this.#collectionCallback);\n      }\n\n      this.#collection = collection;\n      this.#updateOptions = options;\n      this.#notify();\n   }\n\n   /**\n    * Sets options for this collection wrapper / store.\n    *\n    * @param {TJSDocumentCollectionOptions}   options - Options for TJSDocumentCollection.\n    */\n   setOptions(options)\n   {\n      if (!isObject$1(options))\n      {\n         throw new TypeError(`TJSDocumentCollection error: 'options' is not an object.`);\n      }\n\n      // Verify valid values -------------\n\n      if (options.delete !== void 0 && typeof options.delete !== 'function')\n      {\n         throw new TypeError(`TJSDocumentCollection error: 'delete' attribute in options is not a function.`);\n      }\n\n      if (options.preDelete !== void 0 && typeof options.preDelete !== 'function')\n      {\n         throw new TypeError(`TJSDocumentCollection error: 'preDelete' attribute in options is not a function.`);\n      }\n\n      // Set any valid values -------------\n\n      if (options.delete === void 0 || typeof options.delete === 'function')\n      {\n         this.#options.delete = options.delete;\n      }\n\n      if (options.preDelete === void 0 || typeof options.preDelete === 'function')\n      {\n         this.#options.preDelete = options.preDelete;\n      }\n   }\n\n   /**\n    * @param {function(T, object): void} handler - Callback function that is invoked on update / changes.\n    *\n    * @returns {(function(): void)} Unsubscribe function.\n    */\n   subscribe(handler)\n   {\n      this.#subscriptions.push(handler);              // Add handler to the array of subscribers.\n\n      const collection = this.#collection;\n\n      const documentType = collection?.documentName ?? void 0;\n\n      const updateOptions = { action: 'subscribe', documentType, documents: [], data: [] };\n\n      handler(collection, updateOptions);  // Call handler with current value and update options.\n\n      // Return unsubscribe function.\n      return () =>\n      {\n         const index = this.#subscriptions.findIndex((sub) => sub === handler);\n         if (index >= 0) { this.#subscriptions.splice(index, 1); }\n      };\n   }\n}\n\n/**\n * @typedef TJSDocumentCollectionOptions\n *\n * @property {(collection: foundry.abstract.DocumentCollection) => void} [delete] - Optional post delete function\n *           to invoke when document is deleted _after_ subscribers have been notified.\n *\n * @property {(collection: foundry.abstract.DocumentCollection) => void} [preDelete] - Optional pre delete function to\n *           invoke when document is deleted _before_ subscribers are notified.\n */\n\nconst storeState = writable$2(void 0);\n\n/**\n * @type {GameState} Provides a Svelte store wrapping the Foundry runtime / global game state.\n */\nconst gameState = {\n   subscribe: storeState.subscribe,\n   get: () => game\n};\n\nObject.freeze(gameState);\n\nHooks.once('ready', () => storeState.set(game));\n\n/**\n * @typedef {import('svelte/store').Readable} GameState - Provides a Svelte store wrapping the Foundry `game` global variable. It is initialized\n * on the `ready` hook. You may use this store to access the global game state from a Svelte template. It is a read only\n * store and will receive no reactive updates during runtime.\n *\n * @property {import('svelte/store').Readable.subscribe} subscribe - Provides the Svelte store subscribe function.\n *\n * @property {Function} get - Provides a mechanism to directly access the Foundry game state without subscribing.\n */\n\nexport { DerivedArrayReducer, DerivedMapReducer, DynArrayReducer, DynMapReducer, KeyStore, TJSDocument, TJSDocumentCollection, TJSLocalStorage, TJSSessionStorage, gameState, isReadableStore, isUpdatableStore, isWritableStore, propertyStore, subscribeFirstRest, subscribeIgnoreFirst, writableDerived };\n//# sourceMappingURL=index.js.map\n"],
  "mappings": "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",
  "names": ["document", "_indexUpdate", "_derived", "_filtersData", "_sortData", "_destroyed", "_updateSubscribers", "_array", "_derivedPublicAPI", "_filters", "_index", "_indexPublicAPI", "_reversed", "_sort", "_subscriptions", "updateSubscribers_fn", "_map", "storage", "writable", "derived", "_getStore", "_stores", "getStore_fn", "_createStore", "createStore_fn", "document", "_document", "_options", "isObject$1", "_deleted", "_updateOptions", "deleted_fn"]
}
