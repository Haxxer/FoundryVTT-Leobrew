{
  "version": 3,
  "sources": ["../../node_modules/@typhonjs-fvtt/runtime/node_modules/@typhonjs-fvtt/svelte/_dist/helper/index.js"],
  "sourcesContent": ["/**\n * A helper to create a set of radio checkbox input elements in a named set.\n * The provided keys are the possible radio values while the provided values are human readable labels.\n *\n * @param {string} name         The radio checkbox field name\n *\n * @param {object} choices      A mapping of radio checkbox values to human readable labels\n *\n * @param {object} options      Options which customize the radio boxes creation\n *\n * @param {string} options.checked    Which key is currently checked?\n *\n * @param {boolean} options.localize  Pass each label through string localization?\n *\n * @returns {string} HTML for radio boxes.\n *\n * @example <caption>The provided input data</caption>\n * let groupName = \"importantChoice\";\n * let choices = {a: \"Choice A\", b: \"Choice B\"};\n * let chosen = \"a\";\n *\n * @example <caption>The template HTML structure</caption>\n * <div class=\"form-group\">\n *   <label>Radio Group Label</label>\n *   <div class=\"form-fields\">\n *     {@html radioBoxes(groupName, choices, { checked: chosen, localize: true})}\n *   </div>\n * </div>\n */\nfunction radioBoxes(name, choices, options)\n{\n   const checked = options['checked'] || null;\n\n   const localize = options['localize'] || false;\n\n   let html = '';\n\n   for (let [key, label] of Object.entries(choices)) // eslint-disable-line prefer-const\n   {\n      if (localize) { label = globalThis.game.i18n.localize(label); }\n      const isChecked = checked === key;\n      html += `<label class=\"checkbox\"><input type=\"radio\" name=\"${name}\" value=\"${key}\" ${isChecked ? \"checked\" : \"\"}> ${label}</label>`;\n   }\n\n   return new globalThis.Handlebars.SafeString(html);\n}\n\n/**\n * Converts the `selectOptions` Handlebars helper to be Svelte compatible. This is useful when initially converting\n * over an app to Svelte and for essential usage to several dialogs that mirror the core Foundry experience. For\n * an example of usage see {@link TJSDocumentOwnership}.\n *\n * A helper to create a set of <option> elements in a <select> block based on a provided dictionary.\n * The provided keys are the option values while the provided values are human-readable labels.\n * This helper supports both single-select as well as multi-select input fields.\n *\n * @param {object} choices                     A mapping of radio checkbox values to human readable labels\n *\n * @param {object} options                     Helper options\n *\n * @param {string|string[]} [options.selected] Which key or array of keys that are currently selected?\n *\n * @param {boolean} [options.localize=false]   Pass each label through string localization?\n *\n * @param {string} [options.blank]             Add a blank option as the first option with this label\n *\n * @param {string} [options.nameAttr]          Look up a property in the choice object values to use as the option value\n *\n * @param {string} [options.labelAttr]         Look up a property in the choice object values to use as the option label\n *\n * @param {boolean} [options.inverted=false]   Use the choice object value as the option value, and the key as the label\n *                                             instead of vice-versa\n *\n * @returns {string} The <options> HTML element(s).\n *\n * @example <caption>The provided input data</caption>\n * let choices = {a: 'Choice A', b: 'Choice B'};\n * let value = 'a';\n *\n * @example <caption>The template HTML structure</caption>\n * <select name=\"importantChoice\">\n *   {@html selectOptions(choices { selected: value, localize: true })}\n * </select>\n *\n * @example <caption>The resulting HTML</caption>\n * <select name=\"importantChoice\">\n *   <option value=\"a\" selected>Choice A</option>\n *   <option value=\"b\">Choice B</option>\n * </select>\n *\n * @example <caption>Using inverted</caption>\n * let choices = {'Choice A': 'a', 'Choice B': 'b'};\n * let value = 'a';\n *\n * @example <caption>The template HTML structure</caption>\n * <select name=\"importantChoice\">\n *   {@html selectOptions(choices, { selected: value, inverted: true })}\n * </select>\n *\n * @example <caption>Using nameAttr and labelAttr with objects</caption>\n * let choices = {foo: {key: 'a', label: 'Choice A'}, bar: {key: 'b', label: 'Choice B'}};\n * let value = 'b';\n *\n * @example <caption>The template HTML structure</caption>\n * <select name=\"importantChoice\">\n *   {@html selectOptions(choices, { selected: value, nameAttr: 'key', labelAttr: 'label' })}\n * </select>\n *\n * @example <caption>Using nameAttr and labelAttr with arrays</caption>\n * let choices = [{key: 'a', label: 'Choice A'}, {key: 'b', label: 'Choice B'}];\n * let value = 'b';\n *\n * @example <caption>The template HTML structure</caption>\n * <select name=\"importantChoice\">\n *   {@html selectOptions(choices, { selected: value, nameAttr: 'key', labelAttr: 'label' })}\n * </select>\n */\nfunction selectOptions(choices, options)\n{\n   const { localize = false, blank = null, sort = false, nameAttr, labelAttr, inverted } = options;\n   let { selected = null } = options;\n\n   selected = selected instanceof Array ? selected.map(String) : [String(selected)];\n\n   // Prepare the choices as an array of objects\n   const selectChoices = [];\n\n   if (choices instanceof Array)\n   {\n      for (const choice of choices)\n      {\n         const name = String(choice[nameAttr]);\n         let label = choice[labelAttr];\n         if (localize) { label = globalThis.game.i18n.localize(label); }\n         selectChoices.push({ name, label });\n      }\n   }\n   else\n   {\n      for (const choice of Object.entries(choices))\n      {\n         const [key, value] = inverted ? choice.reverse() : choice;\n         const name = String(nameAttr ? value[nameAttr] : key);\n         let label = labelAttr ? value[labelAttr] : value;\n         if (localize) { label = globalThis.game.i18n.localize(label); }\n         selectChoices.push({ name, label });\n      }\n   }\n\n   // Sort the array of options\n   if (sort) { selectChoices.sort((a, b) => a.label.localeCompare(b.label)); }\n\n   // Prepend a blank option\n   if (blank !== null)\n   {\n      const label = localize ? globalThis.game.i18n.localize(blank) : blank;\n      selectChoices.unshift({ name: '', label });\n   }\n\n   // Create the HTML\n   let html = '';\n   for (const option of selectChoices)\n   {\n      const label = globalThis.Handlebars.escapeExpression(option.label);\n      const isSelected = selected.includes(option.name);\n      html += `<option value=\"${option.name}\" ${isSelected ? \"selected\" : \"\"}>${label}</option>`;\n   }\n\n   return new globalThis.Handlebars.SafeString(html);\n}\n\n/**\n * Localize a string including variable formatting for input arguments. Provide a string ID which defines the localized\n * template. Variables can be included in the template enclosed in braces and will be substituted using those named\n * keys.\n *\n * @param {string}   stringId - The string ID to translate.\n *\n * @param {object}   [data] - Provided input data.\n *\n * @returns {string} The translated and formatted string\n */\nfunction localize(stringId, data)\n{\n   const result = typeof data !== 'object' ? globalThis.game.i18n.localize(stringId) :\n    globalThis.game.i18n.format(stringId, data);\n\n   return result !== void 0 ? result : '';\n}\n\nexport { localize, radioBoxes, selectOptions };\n//# sourceMappingURL=index.js.map\n"],
  "mappings": ";AA6BA,SAAS,WAAW,MAAM,SAAS,SACnC;AACG,QAAM,UAAU,QAAQ,SAAS,KAAK;AAEtC,QAAMA,YAAW,QAAQ,UAAU,KAAK;AAExC,MAAI,OAAO;AAEX,WAAS,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,OAAO,GAC/C;AACG,QAAIA,WAAU;AAAE,cAAQ,WAAW,KAAK,KAAK,SAAS,KAAK;IAAE;AAC7D,UAAM,YAAY,YAAY;AAC9B,YAAQ,qDAAqD,gBAAgB,QAAQ,YAAY,YAAY,OAAO;EAC1H;AAEG,SAAO,IAAI,WAAW,WAAW,WAAW,IAAI;AACnD;AAwEA,SAAS,cAAc,SAAS,SAChC;AACG,QAAM,EAAE,UAAAA,YAAW,OAAO,QAAQ,MAAM,OAAO,OAAO,UAAU,WAAW,SAAQ,IAAK;AACxF,MAAI,EAAE,WAAW,KAAI,IAAK;AAE1B,aAAW,oBAAoB,QAAQ,SAAS,IAAI,MAAM,IAAI,CAAC,OAAO,QAAQ,CAAC;AAG/E,QAAM,gBAAgB,CAAA;AAEtB,MAAI,mBAAmB,OACvB;AACG,eAAW,UAAU,SACrB;AACG,YAAM,OAAO,OAAO,OAAO,QAAQ,CAAC;AACpC,UAAI,QAAQ,OAAO,SAAS;AAC5B,UAAIA,WAAU;AAAE,gBAAQ,WAAW,KAAK,KAAK,SAAS,KAAK;MAAE;AAC7D,oBAAc,KAAK,EAAE,MAAM,MAAK,CAAE;IAC3C;EACA,OAEG;AACG,eAAW,UAAU,OAAO,QAAQ,OAAO,GAC3C;AACG,YAAM,CAAC,KAAK,KAAK,IAAI,WAAW,OAAO,QAAO,IAAK;AACnD,YAAM,OAAO,OAAO,WAAW,MAAM,QAAQ,IAAI,GAAG;AACpD,UAAI,QAAQ,YAAY,MAAM,SAAS,IAAI;AAC3C,UAAIA,WAAU;AAAE,gBAAQ,WAAW,KAAK,KAAK,SAAS,KAAK;MAAE;AAC7D,oBAAc,KAAK,EAAE,MAAM,MAAK,CAAE;IAC3C;EACA;AAGG,MAAI,MAAM;AAAE,kBAAc,KAAK,CAAC,GAAG,MAAM,EAAE,MAAM,cAAc,EAAE,KAAK,CAAC;EAAE;AAGzE,MAAI,UAAU,MACd;AACG,UAAM,QAAQA,YAAW,WAAW,KAAK,KAAK,SAAS,KAAK,IAAI;AAChE,kBAAc,QAAQ,EAAE,MAAM,IAAI,MAAK,CAAE;EAC/C;AAGG,MAAI,OAAO;AACX,aAAW,UAAU,eACrB;AACG,UAAM,QAAQ,WAAW,WAAW,iBAAiB,OAAO,KAAK;AACjE,UAAM,aAAa,SAAS,SAAS,OAAO,IAAI;AAChD,YAAQ,kBAAkB,OAAO,SAAS,aAAa,aAAa,MAAM;EAChF;AAEG,SAAO,IAAI,WAAW,WAAW,WAAW,IAAI;AACnD;AAaA,SAAS,SAAS,UAAU,MAC5B;AACG,QAAM,SAAS,OAAO,SAAS,WAAW,WAAW,KAAK,KAAK,SAAS,QAAQ,IAC/E,WAAW,KAAK,KAAK,OAAO,UAAU,IAAI;AAE3C,SAAO,WAAW,SAAS,SAAS;AACvC;",
  "names": ["localize"]
}
